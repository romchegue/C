# File -> Reopen with Encoding -> Cyrillic (Windows 1251)

##### SWITCH-CASE

#include <iostream>
using namespace std;
int main()
{
    setlocale(LC_ALL, "Russian");
    float var1, var2;
    char Operator;
    cout << "Введите простое арифметическое выражение с двумя числами.\n(Пример: \'4 + 17\' или \'5 / 2\' и др.)" << endl;
    cin >> var1 >> Operator >> var2;
    switch (Operator)
    {
    case '+':
        cout << "Результат: " << var1 + var2 << endl;
        break;
    case '-':
        cout << "Результат: " << var1 - var2 << endl;
        break;
    case '*':
        cout << "Результат: " << var1 * var2 << endl;
        break;
    case '/':
        cout << "Результат: " << var1 / var2 << endl;
        break;
    default:
        cout << "Вы ввели неправильный операнд: " << var1 << " \<???\> " << var2 << endl;
        break;
    }

    return 0;
}


##### Цикл WHILE

#include <iostream>
using namespace std;
int main()
{
    setlocale(LC_ALL, "Russian");
    //cout << "Текст вывеля на экран" << endl;
    int a = 0;

    while (a < 10)
    {
        cout << "Переменная а = " << a << endl;
        a++;
    }

    return 0;
}


##### Цикл DO-WHILE

...
int main()
{
    setlocale(LC_ALL, "Russian");
    int a = 18;

    do
    {
        cout << "Переменная а = " << a << endl;
        a++;
    } while (a < 20);
    
    return 0;
}


##### ДОМАШНЕЕ ЗАДАНИЕ #4
/*1. Разработать программу, которая выводит на экран линию из символов. 
Число символов, какой использовать символ, и какая будет линия - вертикальная, 
или горизонтальная - указывает пользователь. */

#include <iostream>
using namespace std;

int main()
{
    setlocale(LC_ALL, "Russian");
    char symbol;  // символ
    int symbolCount;    // число символов
    int lineType;  // тип линии - горизонтальная или вертикальная

    cout << "[INFO] Эта программа выводит на экран линию из символов.\n" << endl;
    cout << "Введите количество символов в линии: ";
    cin >> symbolCount;
    cout << "Введите символ: ";
    cin >> symbol;
    cout << "Выберите тип линии:" << endl
        << "0 - горизонтальная линия" << endl
        << "1 - вертикальная линия" << endl;
    cin >> lineType;

    while (symbolCount > 0)
    {
        switch (lineType)
        {
        case 0:
        {
            cout << symbol;
            break;
        }
        case 1:
        {
            cout << symbol << endl;
            break;
        }
        default:
        {
            cout << "[ERROR] Введён неправильный тип линии" << endl;
            symbolCount = 0;
            break;
        }
        }
        symbolCount--;
    }


/*    switch (lineType)
    {
        case 0:
        {
            while (symbolCount > 0)
            {
                cout << symbol;
                symbolCount--;
            }
            break;
        }
        case 1:
        {
            while (symbolCount > 0)
            {
                cout << symbol << endl;
                symbolCount--;
            }
            break;
        }
        default:
            cout << "[ERROR] Введён неправильный тип линии";
            break;
    }
*/    
   
    cout << endl;

    return 0;
}


##### ДОМАШНЕЕ ЗАДАНИЕ #5
/*Написать программу, которая находит сумму всех целых 
нечетных чисел в диапазоне, указанном пользователе.

Разбор: https://youtu.be/gNoqm6aAzM0*/

#include <iostream>
using namespace std;

int main()
{
    setlocale(LC_ALL, "Russian");
    int rangeBegin, rangeEnd, sum=0;
    
    do
    {
        cout << "Введите на начальное и конечное значение диапазона целых чисел:" << endl;
        cin >> rangeBegin >> rangeEnd;
        if (rangeBegin > rangeEnd)
            cout << "[ERROR!] Начальное значение должно быть меньше или равно конечному!\n" << endl;
    } while (rangeBegin > rangeEnd);
               
    do
    {
        if (rangeBegin % 2 != 0)
        {
            sum += rangeBegin;
            cout << rangeBegin << " ";
        }
        rangeBegin++;
    } while (rangeBegin < rangeEnd);
    
    cout << endl << endl << "Сумма нечётных чисел равна " << sum << endl;

    /*    int start, end, i, sum = 0;
    cout << "Введите на начальное и конечное значение диапазона целых чисел:" << endl;
    cin >> start >> end;
    i = start;
    while (start <= i && i <= end)
    {
        if (i % 2 != 0)
            sum += i;
        i++;
    }
    cout << "Сумма нечетных чисел в диапазоне от " << start
        << " до " << end << " равна: " << sum << endl; */
    return 0;
}


##### Цикл FOR

#include <iostream>
using namespace std;

int main()
{
    setlocale(LC_ALL, "Russian");

    for (int i = 0, j = 10; i < 10 && j != 5; i++, j--)
    {
        cout << "Переменная i = " << i;
        cout << "     Переменная j = " << j << endl;
    }


    return 0;
}


##### Ключевое слово BREAK 
#include <iostream>
using namespace std;

int main()
{
    setlocale(LC_ALL, "Russian");

    cout << "Начало цикла" << endl;
    /*for (int i = 0; i < 10; i++)
    {
        cout << "Переменная i = " << i << endl;
        if (i == 5)
            break;
    } 

    int i = 0;
    while (true)
    {
        cout << "Переменная i = " << i << endl;
        i++;
        if (i == 6)
            break;
    } */


    cout << "Конец цикла" << endl;

    return 0;
}


##### Ключевое слово CONTINUE
#include <iostream>
using namespace std;

int main()
{
    setlocale(LC_ALL, "Russian");

    cout << "Начало цикла" << endl;
    for (int i = 0; i < 10; i++)
    {
        if (i == 5)
        {
            cout << endl;
            continue;
        }
            
        cout << "Переменная i = " << i << endl;
    } 

    cout << "Конец цикла" << endl;

    return 0;
}


###### Урок #21 - C++ закрывается консоль. Что делать? Задержка экрана консоли. 
#include <iostream>
using namespace std;

int main()
{
    setlocale(LC_ALL, "Russian");
    char c;

    cout << "Начало цикла" << endl;
    for (int i = 0; i < 10; i++)
    {
        if (i == 5)
        {
            cout << endl;
            continue;
        }
            
        cout << "Переменная i = " << i << endl;
    } 

    cout << "Конец цикла" << endl;
    system("pause");
    // cin >> c;
    
    return 0;
}


###### Урок #22 - оператор перехода GOTO
#include <iostream>
using namespace std;

int main()
{
    setlocale(LC_ALL, "Russian");
    cout << "Один" << endl;
    
    goto link;

    cout << "Два" << endl;

    cout << "Три" << endl;

    link:

    cout << "Четыре" << endl;

    cout << "Пять" << endl;

    return 0;
}


###### Урок #23 - работа с отладчиком
#include <iostream>
using namespace std;


int Sum(int a, int b)
{
    int c = a + b;
    return c;
}


int main()
{
    setlocale(LC_ALL, "Russian");
    int a = 4;
    int b = 6;
    int c;

    c = a + b;
    
    cout << c << endl;
    c = Sum(10, 20);
    cout << c << endl;
    return 0;
}


###### Урок #24 - Что такое вложенный цикл. Вложенная конструкция. C++ для начинающих. 
#include <iostream>
using namespace std;


int main()
{
    setlocale(LC_ALL, "Russian");

    for (int i = 1; i < 5; i++)
    {
        cout << "Сработал 1-й цикл for итерация № " << i << endl;
        for (int j = 1; j < 5; j++)
        {
            cout << "\tсработал 2-й цикл for итерация № " << j << endl;
        }

    }

    return 0;
}


###### Домашнее задание #6 - Вложенная конструкция. Вложенный цикл.
#include <iostream>
using namespace std;
/*Домашнее задание. Написать программу, которая выводит на экран прямоугольник символом *.
Высота и ширина задаётся пользователем.*/

int main()
{
    setlocale(LC_ALL, "Russian");
    int height, width;
    cout << "Введите ширину прямоугольника и высоту через пробел:" << endl;
    cin >> width >> height;

    for (int i = 0; i < height; i++)
    {
        for (int j = 0; j < width; j++)
        {
            cout << "*";
        }
        cout << endl;
    }
    
    cout << endl;
    return 0;
}


###### Урок #25 - Что такое массив. Примеры. Теория. Array. Одномерный массив. Синтаксис. C++. 
#include <iostream>
using namespace std;

int main()
{
    setlocale(LC_ALL, "Russian");
    int arr[4];

    arr[0] = 5;
    arr[3] = 3333;
    arr[1] = 7;
    arr[2] = 10;
    
    for (int i = 0; i < 10; i++)   // Пробежимся в том числе и по несуществующим элементам массива
        cout << arr[i] << endl;

    cout << arr[0] << endl;
    return 0;
}


###### Урок #26 - Инициализация массива. Способы. Инициализация массива нулями. C++ для начинающих. 
#include <iostream>
using namespace std;

int main()
{
    setlocale(LC_ALL, "Russian");
    int arr[5]{};   // заполнить массив из 5 элементов нулями

    cout << arr[3] << endl;

    return 0;
}


###### Урок #27 - Вывод массива. Массивы и циклы. Цикл с массивом. Array c++. C++ для начинающих. 
#include <iostream>
using namespace std;

int main()
{
    setlocale(LC_ALL, "Russian");
    const int SIZE = 10;
    int arr[SIZE];

    for (int i = 0; i < SIZE; i++)
    {
        arr[i] = i;
    }

    for (int i = 0; i < SIZE; i++)
    {
        cout << arr[i] << endl;
    }
    
    return 0;
}


###### Урок #28 - sizeof что это. sizeof c++ массив. Узнать количество элементов массива. sizeof array.
#include <iostream>
using namespace std;

int main()
{
    setlocale(LC_ALL, "Russian");
    
    int arr[]{5,33,545,111,326, 1212,223};

    //cout << sizeof(double) << endl << endl;
    
    for (int i = 0; i < sizeof(arr) / sizeof(arr[0]); i++)
    {
        cout << arr[i] << endl;
    }
    
    return 0;
}


###### Урок #29 - rand. srand. rand задать диапазон. srand time null. Генератора случайных чисел. randomize.
#include <iostream>
#include <ctime>
using namespace std;

int main()
{
    setlocale(LC_ALL, "Russian");
    srand(time(NULL));
    
    int const SIZE = 10;
    int arr[SIZE];

    for (int i = 0; i < SIZE; i++)
    {
        arr[i] = rand() % 10;
    }

    for (int i = 0; i < SIZE; i++)
    {
        cout << "arr[" << i << "] - " << arr[i] << endl;
    }
           
    return 0;
}


###### Домашнее задание #7 - Заполнить массив случайными числами. Генератор уникальных случайных чисел. rand. srand (МОЁ РЕШЕНИЕ)
/*Домашнее задание #7 - Заполнить массив случайными 
числами. Генератор уникальных случайных чисел. rand. */
#include <iostream>
#include <ctime>

using namespace std;

int main()
{
    setlocale(LC_ALL, "Russian");
    srand(time(NULL));

    const int SIZE = 30;
    int arr[SIZE]{};     // инициализация массива нулями
    int tmp, count;

    for (int i = 0; i < SIZE; i++)
    {
        while (true)
        {
            count = 0;
            tmp = rand() % 100;

            for (int j = 0; j < i; j++)
            {
                if (arr[j] == tmp)
                {
                    count++;
                    cout << "[WARNING!] Повторный элемент - " << tmp << endl;
                }
            }

            if (count == 0)     // если повторяющихся элементов нет
                break;          // выходит из цикла проверки
        }
        arr[i] = tmp;
    }

    cout << "Результат: ";
    for (int i = 0; i < SIZE; i++)
    {
        cout << arr[i] << " ";
    }

    cout << endl;
    return 0;
}


###### Домашнее задание #7 - Заполнить массив случайными числами. Генератор уникальных случайных чисел. rand. srand (РЕШЕНИЕ АВТОРА)
// https://youtu.be/cLzJxOwLSB0
#include <iostream>
#include <ctime>

using namespace std;

/*Домашнее задание #7 - Заполнить массив случайными 
числами. Генератор уникальных случайных чисел. rand. */

int main()
{
    setlocale(LC_ALL, "Russian");
    srand(time(NULL));

    const int SIZE = 10;
    int arr[SIZE]; 
    bool alreadyThere;      // флаг
    
    for (int i = 0; i < SIZE; )
    {
        alreadyThere = false;
        int newRandomValue = rand() % 20;
        
        for (int j = 0; j < i; j++)
        {
            if (arr[j] == newRandomValue)
            {
                alreadyThere = true;
                break;
            }
        }

        if (!alreadyThere)
        {
            arr[i] = newRandomValue;
            i++;
        }
    }

    for (int i = 0; i < SIZE; i++)
    {
        cout << arr[i] << " ";             // вывод готового массива на экран
    }

    cout << endl;
    return 0;
}


###### Домашнее задание #8 - Найти минимальный элемент массива. Поиск минимального элемента в массиве. C++ для начинающих
/*Домашнее задание #8 - Заполнить массив случайными
числами. Найти минимальный элемент массива. */

#include <iostream>
#include <ctime>
using namespace std;

int main() 
{
    setlocale(LC_ALL, "Russian");
    srand(time(NULL));

    const int SIZE = 10;
    int arr[SIZE];
    bool alreadyThere;
    int minValue;
    
    for (int i = 0; i < SIZE; )
    {
        alreadyThere = false;
        int randValue = rand() % 20;

        for (int j = 0; j < i; j++)
        {
            if (randValue == arr[j])
            {
                alreadyThere = true;
                break;
            }
        }

        if (!alreadyThere)
        {
            arr[i] = randValue;
            i++;
        }
    }

    for (int i = 0; i < SIZE; i++)
    {
        cout << arr[i] << " ";
    }
    cout << endl;

    minValue = arr[0];
    for (int i = 1; i < SIZE; i++)
    {
        if (arr[i] < minValue)
        {
            minValue = arr[i];
        }
    }
    
    cout << endl << "Минимальный элемент массива равен " << minValue << endl;

    cout << endl;
    return 0;
}


###### Урок #31 - Двумерный массив инициализация. Двумерный массив индексы. Синтаксис. Пример.
#include <iostream>
#include <ctime>
using namespace std;

int main() 
{
    setlocale(LC_ALL, "russian");
    const int ROW = 3;
    const int COL = 4;

    // int arr[][COL]{} 

    int arr[ROW][COL]
    { 
        {2,4,55,1},
        {22,34,545,21},
        {2,3,45,22} 
    };

    cout << arr[1][1] << endl;

    cout << endl;
    return 0;
}


###### Урок #31 - Двумерные массивы вывод. Заполнение. Двумерный массив циклы. C++ для начинающих.
#include <iostream>
#include <ctime>
using namespace std;

int main() 
{
    setlocale(LC_ALL, "russian");
    srand(time(NULL));

    const int ROWS = 5;
    const int COLS = 8;

    int arr[ROWS][COLS];

    for (int i = 0; i < ROWS; i++)
    {
        for (int j = 0; j < COLS; j++)
        {
            arr[i][j] = rand() % 10;
        }
    }

    for (int i = 0; i < ROWS; i++)
    {
        for (int j = 0; j < COLS; j++)
        {
            cout << arr[i][j] << " ";
        }
        cout << endl;
    }

    return 0;
}


###### Урок #33 - Функции c++ примеры. Синтаксис. Объявление, реализация функции. Параметры, аргументы.
#include <iostream>
using namespace std;

void foo()
{
    cout << "Я функция, меня вызвали!" << endl;
    return;   // default
}

int Sum(int a, int b)
{
    return a + b;
}

int main() 
{
    setlocale(LC_ALL, "russian");

    int c;
    int q = 11;
    int w = 12;

    cout << Sum(q, w) << endl;
    foo();

    return 0;
}


###### Урок #34 - Передача параметров в функцию по значению. Параметры функции. Передача аргументов в функцию.
#include <iostream>
using namespace std;

int Foo(int a)
{
    return ++a;      // Префиксный инкримент - самый высокий приоритет
}

int main() 
{
    setlocale(LC_ALL, "russian");
    int value = 1;

    value = Foo(value);

    cout << value << endl;
    return 0;
}


###### Урок #35 - Передача массива в функцию. Как передать массив в функцию. C++ для начинающих.
#include <iostream>
using namespace std;

void FillArray(int arr[], const int size)
{
    for (int i = 0; i < size; i++)
    {
        arr[i] = rand() % 10;
    }
}

void PrintArray(int arr[], const int size)
{
    for (int i = 0; i < size; i++)
    {
        cout << arr[i] << endl;
    }
}

int main() 
{
    setlocale(LC_ALL, "russian");
    const int SIZE = 10;
    int massiv[SIZE];

    int a = sizeof(massiv);

    FillArray(massiv, SIZE);

    PrintArray(massiv, SIZE);

    return 0;
}


###### Урок #36 - Прототипы функций. Прототип функции что это. Прототип функции пример. C++ для начинающих.
#include <iostream>
using namespace std;

int foo(int a, int b);     // прототип функции

int main() 
{
    setlocale(LC_ALL, "russian");
    // foo(5, 6);
    cout << foo(5, 6) << endl;

    return 0;
}

int foo(int a, int b)
{
    cout << "Я функция, меня вызвали!" << endl;
    return a + b;
}


###### Урок #37 - Область видимости. Глобальные переменные и локальные переменные. C++ для начинающих.
#include <iostream>
using namespace std;

int a;     // глобальные переменные инициализируются НЕ МУСОРОМ, а значением по умолчанию

void foo(int a)    // в таком случае переменная a - ЛОКАЛЬНАЯ, а НЕ ГЛОБАЛЬНАЯ
{
    a++;
}

void main() 
{
    a++;      // а - ГЛОБАЛЬНАЯ переменная
    foo();
    cout << a << endl;
}


###### Урок #38 - Параметры по умолчанию. Передача аргументов в функцию по умолчанию. Аргументы по умолчанию.
#include <iostream>
using namespace std;

void foo(int a = 5, double b = 0.5)
{
    for (int i = 0; i < a; i++)
    {
        cout << "#" << endl;
    }
    cout << b * 100 << endl;
}

void main() 
{
    foo(10, 0.7);
    foo();
}


###### Урок #39 - inline c++ что это. Ключевое слово inline. Встраиваемая функция. C++ для начинающих.
#include <iostream>
using namespace std;

inline int Sum(int a, int b)    // используется только для маленьких простых функций
{
    return a + b;
}

void main() 
{
    Sum(3, 4);
}


###### Урок #40 - Перегрузка функций c++ пример.Что такое перегрузка функций. Как перегрузить функцию. 
#include <iostream>
using namespace std;

int Sum(int a, int b)
{
    return a + b;
}

int Sum(int a, int b, int c)
{
    a++;
    cout << "TEST" << endl;
    return a + b + c;
}

double Sum(double a, double b)
{
    return a + b;
}

void main() 
{
    cout << Sum(7.321, 12.3216) << endl;   // double Sum(double a, double b)
    cout << Sum(10, 2) << endl;            // int Sum(int a, int b)
    cout << Sum(10, 1, 5000) << endl;      // int Sum(int a, int b, int c)
}


###### Урок #41 - Шаблоны функций. Шаблонные функции c++. template typename. template class. 
#include <iostream>
using namespace std;

/*
template <typename T>

T Sum(T a, T b)
{
    return a + b;
}

template <typename T1, typename T2>

T1 Sum(T1 a, T2 b)
{
    return a + b;
}

template <typename T1, typename T2>

void Sum(T1 a, T2 b)
{
    cout << a << endl;
    cout << b << endl;
}
*/

template <class T>         // то же самое, что и "template <typename T>"
void Sum(T a)
{
    cout << a << endl;
}

void main() 
{
    setlocale(LC_ALL, "Russian");
    Sum(10);
    Sum(9.23324);
    Sum("asass");
}


###### Урок #42 - Функции и стек. Стек алгоритм. Стек что это. Стек рекурсии. Стек c++. Стек рекурсивных вызовов


###### Урок #43 - Рекурсия что это. Рекурсия программирование. Рекурсия и цикл. Рекурсия с++. Для начинающих.
#include <iostream>
using namespace std;

int Foo(int a)
{
    if (a < 1)
        return 0;
    a--;
    cout << a << endl;
    return Foo(a);
}

void main() 
{
    setlocale(LC_ALL, "Russian");

    cout << "RESULT: " << Foo(5) << endl;
}


###### Урок #44 - Рекурсия. Факториал числа c++ рекурсивно. Рекурсия факториал. Рекурсивный алгоритм факториал.
#include <iostream>
using namespace std;

// Факториал: N! = N * (N-1)!; 

int Fact(int N)
{
    if (N < 0)
    {
        return 0;
    }
    
    if (N == 0 || N == 1)
    {
        return 1;
    }
    return N * Fact(N - 1);
}

void main() 
{
    setlocale(LC_ALL, "Russian");
    
    cout << Fact(5) << endl;

/*  for (int i = 0; i < 10; i++)
    {
        cout << "Factorial " << i << " = " << Fact(i) << endl;
    }   */
}


###### Урок #45 - Что такое динамическая память. Утечка памяти. Стек и куча. Статическая память. Обзорный урок


###### Урок #46 - Указатели c++ что это. Для чего нужны. Указатели c++ разыменование. C++ для начинающих.
#include <iostream>
using namespace std;


void main() 
{
    int a = 5;
    cout << "a\t" << a << endl;

    int *pa = &a;      // указатель 'pa' на переменную 'a'. & - оператор взятия адреса в RAM
    int *pa2 = &a;
    
    cout << "pa\t" << pa << "\npa2\t" << pa2 << endl;
    cout << "*pa\t" << *pa << endl;      // *pa - РАЗЫМЕНОВАНИЕ указателя = получение значения по адресу в RAM

    *pa2 = 2;      // присвоение значения через указатель через РАЗЫМЕНОВЫВАНИЕ
    cout << "a\t" << a << endl;
    cout << "*pa\t" << *pa << endl;
}


###### Урок #47 - Арифметика указателей. Указатели и массивы. Массив это указатель. C++ для начинающих.
#include <iostream>
using namespace std;

void main() 
{
    const int SIZE = 5;
    int arr[SIZE]{4,55,79,1,4};       // имя массива - это УКАЗАТЕЛЬ на его первый элемент - arr[0]
    int *pArr = arr;
    
    cout << *(arr + 1) << endl;     // сдвиг на 1 шаг, равный количеству байт типа элементов массива
                                    // в нашем случае - int - 4 байта

    for (int i = 0; i < SIZE; i++)
    {
        cout << (arr + i) << "\t" << *(arr + i) << endl;
    }

    cout << *(arr + 10) << endl;     // ОПАСНО!!! МЫ МОЖЕМ ВЫХОДИТЬ ЗА ГРАНИЦЫ МАССИВА
/*
    for (int i = 0; i < SIZE; i++)
    {
        cout << arr[i] << endl;
    }

    cout << "=========================" << endl;

    cout << "arr\t" << arr << endl;
    cout << "pArr\t" << pArr << endl;

    cout << "=========================" << endl;

    for (int i = 0; i < SIZE; i++)
    {
        cout << *(pArr + i) << endl;        // эквивалентно - pArr[i] 
    }
*/
}


###### Урок #48 - Передача параметров в функцию по указателю c++. Передача указателя в функцию си.
#include <iostream>
using namespace std;

void Foo(int *pa)     // аргумент - УКАЗАТЕЛЬ
{
    (*pa)++;      // СНАЧАЛА - разыменовать, а потом увеличить значение на 1. 
                  // Тут идёт работа непосредственно с памятью. Поэтому все измененения
                  // сохраняются в ячейках памяти
}

void main() 
{
    int a = 0;
    cout << a << endl;

    Foo(&a);         // передаём АДРЕС
    cout << a << endl;

}


###### Урок #49 - Возврат нескольких значений функции через указатели. Функция возвращает несколько значений.
#include <iostream>
using namespace std;

void Foo(int *pa, int *pb, int *pc)
{
    (*pa) = 555;
    (*pb)++;
    (*pc) = -20;
}

void main() 
{
    int a = 0, b = 0, c = 1;

    cout << "a = " << a << endl;
    cout << "b = " << b << endl;
    cout << "c = " << c << endl;

    cout << "foo" << endl;

    Foo(&a, &b, &c);      

    cout << "a = " << a << endl;
    cout << "b = " << b << endl;
    cout << "c = " << c << endl;

}


###### Домашнее задание #9 - Напишите функцию, меняющую местами значения переменных с помощью указателей.
/*Домашнее задание #9 - 
Напишите функцию, меняющую местами 
значения переменных с помощью указателей.*/

#include <iostream>
using namespace std;

void Swap(int *a, int *b)
{
    int temp = *a;
    *a = *b;
    *b = temp;
}

void main() 
{
    setlocale(LC_ALL, "Russian");
    int var1, var2;

    cout << "Введите два целых числа через пробел:" << endl;
    cin >> var1 >> var2;

    cout << "var1\t" << var1 << endl;
    cout << "var2\t" << var2 << endl;
    cout << "Swap" << endl;

    Swap(&var1, &var2);

    cout << "var1\t" << var1 << endl;
    cout << "var2\t" << var2 << endl;
    
}


###### Урок #50 - c++ ссылки что это. c++ ссылки и указатели разница. Указатель на ссылку. 
#include <iostream>
using namespace std;


void main() 
{
    setlocale(LC_ALL, "Russian");
    int a = 5;
    
    int *pa = &a;     // запись адреса переменной В УКАЗАТЕЛЬ

    int &aRef = a;    // запись адреса переменной В ССЫЛКУ 

    int *ppa = &aRef;

    cout << "a\t" << a << endl;
    *ppa = 12;
    cout << "a\t" << a << endl;

/*
    cout << "*pa\t" << pa << endl;
    pa++;                                  // АРИФМЕТИКА указателей
    cout << "*pa\t" << pa << endl;

    aRef = 55;
    cout << "a\t" << a << endl;
                                           
    cout << "*pa\t" << *pa << endl;
    cout << "&aRef\t" << aRef << endl;

    int *pp = NULL;    
    // int *pp = nullptr;
*/
}


###### Урок #51 - Передача параметров в функцию по ссылке. Разница между ссылкой и указателем.
#include <iostream>
using namespace std;

void Foo(int a)
{
    a = 1;
}

void Foo2(int &a)
{
    a = 2;
}

void Foo3(int *a)
{
    *a = 3;
}

void main() 
{
    int value = 5;
    cout << "value = " << value << endl << endl;

    Foo(value);
    cout << "Foo = " << endl;
    cout << "value = " << value << endl << endl;

    Foo2(value);
    cout << "Foo2 = " << endl;
    cout << "value = " << value << endl << endl;

    Foo3(&value);
    cout << "Foo3 = " << endl;
    cout << "value = " << value << endl << endl;

}


###### Урок #52 - Возврат нескольких значений функции через ссылки. Как вернуть несколько значений функции.
#include <iostream>
using namespace std;

void Foo(int &a, int &b, int &c)
{
    a = 10;
    b *= 2;
    c -= 100;
}

void main() 
{
    int a = 0, b = 4, c = 34;
    cout << "a = " << a <<endl;
    cout << "b = " << b << endl;
    cout << "c = " << c << endl;

    cout << "Foo" << endl;
    Foo(a, b, c);

    cout << "a = " << a << endl;
    cout << "b = " << b << endl;
    cout << "c = " << c << endl;

}


###### Домашнее задание #10 - написать ШАБЛОННУЮ функцию которая меняет местами значения 2-х переменных с помощью ССЫЛОК.
#include <iostream>
#include <string>
using namespace std;

template <typename T>
void Swap(T &a, T &b)
{
    T temp = a;
    a = b;
    b = temp;
}


void main()
{
    int a1 = 10, a2 = 20;
    double b1 = 1.23, b2 = 4.56;
    char c1 = 'A', c2 = 'Z';
    string s1 = "string1", s2 = "STRING2";

    cout << "(a1, a2) = (" << a1 << ", " << a2 << ")" << endl;
    cout << "Swap" << endl;
    Swap(a1, a2);
    cout << "(a1, a2) = (" << a1 << ", " << a2 << ")" << endl << endl;

    cout << "(b1, b2) = (" << b1 << ", " << b2 << ")" << endl;
    cout << "Swap" << endl;
    Swap(b1, b2);
    cout << "(b1, b2) = (" << b1 << ", " << b2 << ")" << endl << endl;

    cout << "(c1, c2) = (" << c1 << ", " << c2 << ")" << endl;
    cout << "Swap" << endl;
    Swap(c1, c2);
    cout << "(c1,c2) = (" << c1 << ", " << c2 << ")" << endl << endl;

    cout << "(s1, s2) = (" << s1 << ", " << s2 << ")" << endl;
    cout << "Swap" << endl;
    Swap(s1, s2);
    cout << "(s1,s2) = (" << s1 << ", " << s2 << ")" << endl << endl;

}


###### Урок #53 - new c++ что это. new c++ пример. c++ new delete. delete c++ что это. delete c++ пример.
#include <iostream>
using namespace std;


void main()
{
    int *pa = new int;    // выдялет место в RAM за пределами нашей программы
    *pa = 10;
    cout << *pa << endl;
    cout << pa << endl;
    
    delete pa;           // ОБЯЗАТЕЛЬНО!!! Очистить за собой место в RAM
     
    cout << pa << endl;
}


###### Урок #54 - Что такое null pointer. null c++ что это. nullptr c++ что это. nullptr c++11.
#include <iostream>
using namespace std;


void main()
{
    int *pa = new int;
    *pa = 10;
    cout << *pa << endl;
    delete pa;   // СНАЧАЛА зачистить данные из RAM, а только потом обнулять указатель - nullptr

    //pa = 0;     // нулевой указатель. 
    //pa = NULL;  // то же самое, что "pa = 0;"
    pa = nullptr;   // НЕ ЦЕЛОЧИСЛЕННЫЙ НОЛЬ (int 0) !!!  <--- BEST PRACTICE

    if (pa != nullptr)
    {
        cout << pa << endl;
    }
    
}


###### Урок #55 -Динамический массив с++ пример. Создание, заполнение, удаление, размер динамического массива.











