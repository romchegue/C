// https://projecteuler.net/

// File SimpleTimer.h
#pragma once
#include <iostream>
#include <chrono>

class SimpleTimer
{
public:
	SimpleTimer();
	~SimpleTimer();
private:
	std::chrono::time_point<std::chrono::steady_clock> start, end;
	std::chrono::duration<float> duration;
};


// File SimpleTimer.cpp
#include "SimpleTimer.h"

SimpleTimer::SimpleTimer()
{
	start = std::chrono::high_resolution_clock::now();
}

SimpleTimer::~SimpleTimer()
{
	end = std::chrono::high_resolution_clock::now();
	duration = end - start;
	std::cout << "\nDURATION: " << duration.count() << "s" << std::endl;
}


//###### Problem 1 - Multiples of 3 and 5
// If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. 
// The sum of these multiples is 23.
// Find the sum of all the multiples of 3 or 5 below 1000.
#include <iostream>
#include "SimpleTimer.h"

double SumDivisbleBy(const int n, const int target)
{
	double p = target / n;
	return (double)(n * (p*(p+1)) / 2);
}

int main()
{
	SimpleTimer st;
	const int target = 999999999;
	
	/*
	double sum = 0;
	for (size_t i = 1; i <= target; i++)
	{
		if (i % 3 == 0 || i % 5 == 0)
		{
			sum += i;
		}
	}
	std::cout << sum << std::endl;
	*/

	std::cout << SumDivisbleBy(3, target) + SumDivisbleBy(5, target) - SumDivisbleBy(15, target) << std::endl;
	
	return 0;
}



//###### Problem 2 - Even Fibonacci numbers
// Each new term in the Fibonacci sequence is generated by adding the previous two terms.
// By starting with 1 and 2, the first 10 terms will be :
// 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
// By considering the terms in the Fibonacci sequence whose values do not exceed four million, 
// find the sum of the even - valued terms.

#include <iostream>
#include "SimpleTimer.h"

int EvenFebonacciSum(const int upperBound)
{
	int sum = 0;
	int temp;
	int a = 1;
	int b = 1;

	while (b < upperBound)
	{
		if (b % 2 == 0)
		{
			std::cout << b << std::endl;
			sum += b;
		}
		temp = b;
		b += a;
		a = temp;
	}

	return sum;
}


int main()
{
	SimpleTimer st;
	
	const int upperBound = 4000000;

	std::cout << std::endl << EvenFebonacciSum(upperBound) << std::endl;
	return 0;
}


//###### Problem 3 - Largest prime factor
// The prime factors of 13195 are 5, 7, 13 and 29.
// What is the largest prime factor of the number 600851475143 ?

#include <iostream>
#include <cmath>
#include "SimpleTimer.h"

bool IsPrime(int a)
{
	if (a <= 1)     // if number a less or equal 1 then return FALSE
	{
		return false;
	}

	for (int i = 2; i < sqrt(a) + 1; ++i)
	{
		if (a % i == 0) // in this case the number "number" is not prime
		{
			return false;
		}   
	}
	return true;
}

int nextPrime(int start)
{
	while (true)
	{
		if (IsPrime(start))    // the number "start" is prime
		{ 
			return start; 
		}  
		else                   // go to the next number
		{
			start++;
		}
	}
}

int main()
{
	SimpleTimer st;
	
	long long int number = 600851475143;
	int primeFactor = 2;
	int largestPrimeFactor;

	while (true)
	{
		if (number % primeFactor == 0)
		{
			largestPrimeFactor = primeFactor;
			std::cout << largestPrimeFactor << std::endl;
			if (number / primeFactor == 1)
			{
				break;
			}
			number /= primeFactor;
		}
		else
		{
			primeFactor = nextPrime(primeFactor + 1);
		}
	}

	std::cout << std::endl << largestPrimeFactor << std::endl;
	return 0;
}

