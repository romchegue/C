// https://projecteuler.net/

// File SimpleTimer.h
#pragma once
#include <iostream>
#include <chrono>

class SimpleTimer
{
public:
	SimpleTimer();
	~SimpleTimer();
private:
	std::chrono::time_point<std::chrono::steady_clock> start, end;
	std::chrono::duration<float> duration;
};


// File SimpleTimer.cpp
#include "SimpleTimer.h"

SimpleTimer::SimpleTimer()
{
	start = std::chrono::high_resolution_clock::now();
}

SimpleTimer::~SimpleTimer()
{
	end = std::chrono::high_resolution_clock::now();
	duration = end - start;
	std::cout << "\nDURATION: " << duration.count() << "s" << std::endl;
}


//###### Problem 1 - Multiples of 3 and 5
// If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. 
// The sum of these multiples is 23.
// Find the sum of all the multiples of 3 or 5 below 1000.
#include <iostream>
#include "SimpleTimer.h"

double SumDivisbleBy(const int n, const int target)
{
	double p = target / n;
	return (double)(n * (p*(p+1)) / 2);
}

int main()
{
	SimpleTimer st;
	const int target = 999999999;
	
	/*
	double sum = 0;
	for (size_t i = 1; i <= target; i++)
	{
		if (i % 3 == 0 || i % 5 == 0)
		{
			sum += i;
		}
	}
	std::cout << sum << std::endl;
	*/

	std::cout << SumDivisbleBy(3, target) + SumDivisbleBy(5, target) - SumDivisbleBy(15, target) << std::endl;
	
	return 0;
}



//###### Problem 2 - Even Fibonacci numbers
// Each new term in the Fibonacci sequence is generated by adding the previous two terms.
// By starting with 1 and 2, the first 10 terms will be :
// 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
// By considering the terms in the Fibonacci sequence whose values do not exceed four million, 
// find the sum of the even - valued terms.

#include <iostream>
#include "SimpleTimer.h"

int EvenFebonacciSum(const int upperBound)
{
	int sum = 0;
	int temp;
	int a = 1;
	int b = 1;

	while (b < upperBound)
	{
		if (b % 2 == 0)
		{
			std::cout << b << std::endl;
			sum += b;
		}
		temp = b;
		b += a;
		a = temp;
	}

	return sum;
}


int main()
{
	SimpleTimer st;
	
	const int upperBound = 4000000;

	std::cout << std::endl << EvenFebonacciSum(upperBound) << std::endl;
	return 0;
}


//###### Problem 3 - Largest prime factor
// The prime factors of 13195 are 5, 7, 13 and 29.
// What is the largest prime factor of the number 600851475143 ?

#include <iostream>
#include <cmath>
#include "SimpleTimer.h"

bool IsPrime(int a)
{
	if (a <= 1)     // if number a less or equal 1 then return FALSE
	{
		return false;
	}

	for (int i = 2; i < sqrt(a) + 1; ++i)
	{
		if (a % i == 0) // in this case the number "number" is not prime
		{
			return false;
		}   
	}
	return true;
}

int nextPrime(int start)
{
	while (true)
	{
		if (IsPrime(start))    // the number "start" is prime
		{ 
			return start; 
		}  
		else                   // go to the next number
		{
			start++;
		}
	}
}

int main()
{
	SimpleTimer st;
	
	long long int number = 600851475143;
	int primeFactor = 2;
	int largestPrimeFactor;

	while (true)
	{
		if (number % primeFactor == 0)
		{
			largestPrimeFactor = primeFactor;
			std::cout << largestPrimeFactor << std::endl;
			if (number / primeFactor == 1)
			{
				break;
			}
			number /= primeFactor;
		}
		else
		{
			primeFactor = nextPrime(primeFactor + 1);
		}
	}

	std::cout << std::endl << largestPrimeFactor << std::endl;
	return 0;
}


//###### Problem 4 (NOT GOOD) - Largest palindrome product
// A palindromic number reads the same both ways. 
// The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 Г— 99.
// Find the largest palindrome made from the product of two 3-digit numbers.

#include <iostream>
#include <string>
#include "SimpleTimer.h"

int Strlen(const char *string)
{
    int i = 0;
    char ch = string[i];

    while (ch != '\0') { ch = string[++i]; }

    return i;
}

bool IsPalindromic(const char *string)
{
    int length = Strlen(string);

    int i = 0;             // a first element in the string
    int j = length - 1;    // a last element in the string

    for (i; i < length / 2; ++i, --j)
    {
        if (string[i] != string[j])
        {
            return false;
        }
    }

    return true;
}


int main()
{
    SimpleTimer timer;
    const int target = 999;
    int largestPolindrome = 0;
    int tempNum;
    std::string tempStr;

    for (int i = target; i > 99; --i)
    {
        for (int j = target; j > 99; --j)
        {
            tempNum = i * j;
            tempStr = std::to_string(tempNum);
            if (IsPalindromic(tempStr.c_str()))
            {
                if (tempNum > largestPolindrome)
                {
                    largestPolindrome = tempNum;
                    std::cout << "THE LARGEST POLINDROM IS: " << largestPolindrome << std::endl;
                }
                else
                {
                    break;
                }
            }
        }
    }


    std::cout << largestPolindrome << std::endl;
    return 0;
}


//###### Problem 4 - Largest palindrome product
// A palindromic number reads the same both ways. 
// The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 Г— 99.
// Find the largest palindrome made from the product of two 3-digit numbers.

#include <iostream>
#include "SimpleTimer.h"

int reverse(int num)
{
    int reversed = 0;
    while (num > 0)
    {
        reversed = 10 * reversed + num % 10;
        num /= 10;
    }
    return reversed;
}

bool isPalindrome(int num)
{
    return num == reverse(num);
}

int main()
{
    SimpleTimer timer;
    const int MIN = 100000;
    const int MAX = 999999;
    int largestPalindrome = 0;

    for (int i = MAX; i >= MIN; --i)
    {
        
        if (i % 10 == 0)   // a number that ends in 0 cannot be a palindrome
        {
            continue;
        }
        
        for (int j = i; j >= MIN; --j)
        {
            
            if (j % 10 == 0)   // a number that ends in 0 cannot be a palindrome
            {
                continue;
            }
            
            if (i * j <= largestPalindrome)   // numbers <= largestPolindrome are inappropriate
            {
                break;
            }

            if (isPalindrome(i * j))
            {
                largestPalindrome = i * j;
            }
        }
    }
    

    std::cout << largestPalindrome << std::endl;

    return 0;
}


//###### Problem 5 - Smallest multiple
// 2520 is the smallest number that can be divided by each 
// of the numbers from 1 to 10 without any remainder.
// What is the smallest positive number that is evenly 
// divisible by all of the numbers from 1 to 20?

#include <iostream>
#include "SimpleTimer.h"
#include <cmath>

bool isPrime(int num)
{
    for (size_t i = 2; i < (int)sqrt(num) + 1; ++i)
    {
        if (num % i == 0)
        {
            return false;
        }
    }

    return true;
}

long long int primeMux(int num, long long int res)
{
    long long int temp = res;
    const int MAX = (int)sqrt(num) + 1;

    for (size_t i = 2; i < MAX; ++i)
    {
        while (num % i == 0)
        {
            if (temp % i == 0)
            {
                temp /= i;
            }
            else
            {
                res *= i;
            }

            num /= i;
            if (num <= 1)
            {
                break;
            }
        }
    }
    
    return res;
}


// TEST OF THE PROGRAM SPEED:
void testMain(const char* msg)   
{
    SimpleTimer timer;
    long long int result = 1;
    const int MAX = 30;
    for (int i = 2; i <= MAX; ++i)
    {
        if (result % i == 0) continue;

        if (isPrime(i))
        {
            result *= i;
        }
        else
        {
            result = primeMux(i, result);
        }
    }
    std::cout << msg << "\tRESULT: " << result << std::endl;
}


int main()
{
    /*
    // TESTS OF THE PROGRAM SPEED
    char message[] = "TEST #2 (isPrime + primeMux + result % i)";
    
    for (size_t i = 0; i < 10; i++)
    {
        testMain(message);
    }
    */


    SimpleTimer timer;
    long long int result = 1;
    const int MAX = 30;
    for (int i = 2; i <= MAX; ++i)
    {
        
        if (isPrime(i))
        {
           result *= i;
        }
        else
        {
            result = primeMux(i, result);
        } 
    }

    std::cout << result << std::endl;
    
    return 0;
}




//###### Problem 5 - Smallest multiple
// 2520 is the smallest number that can be divided by each 
// of the numbers from 1 to 10 without any remainder.
// What is the smallest positive number that is evenly 
// divisible by all of the numbers from 1 to 20?

class PointerToArray 
{
public:
    PointerToArray(T* pointer, size_t size = 1) : this->pointer(pointer), this->size(size) {}
    PointerToArray(PointerToArray const& other) :pointer(other.pointer), size(other.size) {}
    T& operator  *()const { return  *pointer; }
    T* operator  ->()const { return  pointer; }
    T& operator [](size_t i)const { return *(pointer + i); }
    T* operator +(size_t i)const { return pointer + i; }
    T* begin()const { return pointer; }
    T* end()const { return pointer + size; }
    size_t size()const { return size; }
private:
    T* pointer;
    size_t size;
};


void g(PointerToArray<int> px) 
{
    std::cout << "size of array is " << px.size() << std::endl;
    std::cout << "px[5]==" << px[5] << std::endl;
    std::cout << "*(px+5)==" << (*(px + 5)) << std::endl;
}

//###### Problem 5 - Smallest multiple
// 2520 is the smallest number that can be divided by each 
// of the numbers from 1 to 10 without any remainder.
// What is the smallest positive number that is evenly 
// divisible by all of the numbers from 1 to 20?

#include <iostream>
#include "SimpleTimer.h"
#include <cmath>

bool isPrime(int num)
{
    for (size_t i = 2; i < (int)sqrt(num) + 1; ++i)
    {
        if (num % i == 0)
        {
            return false;
        }
    }

    return true;
}

void GetPrimeArray(int *arr, const int MAX)
{
    int index = 0;
    
    for (int i = 2; i <= MAX; ++i)   // fill an array of prime numbers <= MAX
    {
        if (isPrime(i))
        {
            arr[index] = i;
            ++index;
        }
    }

}

void TEST(const char* msg = "")
{
    SimpleTimer timer;

    long long int result = 1;
    int MAX = 30;
    int* primeArray = new int[MAX]{ 0 };

    int limit = (int)sqrt(MAX);

    GetPrimeArray(primeArray, MAX);    // generate an array of prime numbers <= MAX

    int i = 0;
    while (primeArray[i] != 0)
    {
        if (primeArray[i] <= limit)
        {
            int temp = int(log(MAX) / log(primeArray[i]));
            int temp1 = primeArray[i];
            result *= pow(temp1, temp);
        }
        else
        {
            result *= primeArray[i];
        }

        ++i;
    }

    delete[] primeArray;
    std::cout << msg << "\tRESULT: " << result << std::endl;
}

int main()
{
    /*
    for (size_t i = 0; i < 10; i++)
    {
        TEST("TEST #3 (GetPrimeArray)");
    }
    */

    
    SimpleTimer timer;

    long long int result = 1;
    int MAX = 20;
    int *primeArray = new int[MAX]{ 0 };
   
    int limit = (int)sqrt(MAX);
    
    GetPrimeArray(primeArray, MAX);    // generate an array of prime numbers <= MAX

    int i = 0;
    while (primeArray[i] != 0)
    {
        if (primeArray[i] <= limit)
        {
            int temp = int(log(MAX) / log(primeArray[i]));
            int temp1 = primeArray[i];
            result *= pow(temp1, temp);
        }
        else
        {
            result *= primeArray[i];
        }
        
        ++i;
    }

    std::cout << result << std::endl;
    
    delete[] primeArray;

    return 0;
}

 
//###### MY SIMPLE PROFILER

// File MyTools.h
#pragma once
#include <iostream>
#include <chrono>
#include <fstream>

// Function myProfiler takes 2 arguments: a function with type void and without argumets and a number of function calls
void myProfiler(void(*func)(), const int COUNT = 10, const char* MESSAGE = "", const char *FILENAME = "TEST_RESULTS.txt");   // this is a simple profiler



// File MyTools.cpp
#include "MyTools.h"

void myProfiler(void(*func)(), const int COUNT, const char *MESSAGE, const char *FILENAME)  
{
    std::ofstream fout;     // write to file:
    fout.open(FILENAME, std::ios_base::app);
    
    std::chrono::time_point<std::chrono::steady_clock> start, end;
    std::chrono::duration<float> sumDuration;

    start = std::chrono::high_resolution_clock::now();
    end = std::chrono::high_resolution_clock::now();
    sumDuration = end - start;

    for (size_t i = 0; i < COUNT; ++i)
    {
        start = std::chrono::high_resolution_clock::now();
        func();
        end = std::chrono::high_resolution_clock::now();

        sumDuration += end - start;
    }

    std::cout << std::endl << std::endl;
    if (MESSAGE != "") 
    { 
        std::cout << MESSAGE << std::endl; 
        fout << MESSAGE << std::endl;
    }
    std::cout << "Total code execution time " << COUNT << " times:\t" << sumDuration.count() << "s" << std::endl << std::endl;
    fout << "Total code execution time " << COUNT << " times:\t" << sumDuration.count() << "s" << std::endl << std::endl;

    fout.close();

    system("pause");
}


//###### Problem 6 - Sum square difference
// The sum of the squares of the first ten natural numbers is,
//     pow(1,2) + pow(2,2) + ... + pow(10,2) = 385
// The square of the sum of the first ten natural numbers is,
//     pow((1 + 2 + ... + 10), 2) = pow(55, 2) = 3025
// Hence the difference between the sum of the squares of the 
// first ten natural numbers and the square of the sum is 3025в€’385 = 2640.
// Find the difference between the sum of the squares of the first 
// one hundred natural numbers and the square of the sum.

#include <iostream>
#include <cmath>
#include "MyTools.h"


void TEST()
{
    int MAX = 100;
    
    __int64 sum = 0;
    __int64 sum_sq = 0;
    __int64 result;

    for (size_t i = 1; i <= MAX; ++i)
    {
        sum_sq += i * i;
        sum += i;
    }
    
    std::cout << sum * sum - sum_sq << std::endl;
}

int main()
{
    // myProfiler(TEST, 1000000, "Problem 6 - Sum square difference. [Simple version]");
    TEST();
    
    const int MAX = 100;

    __int64 sum = 0;
    __int64 sum_sq = 0;
    __int64 result;

    for (size_t i = 1; i <= MAX; ++i)
    {
        sum_sq += i * i;
        sum += i;
    }

    std::cout << sum * sum - sum_sq << std::endl;
    

    return 0;
}


##### Problem 6 - Sum square difference
// The sum of the squares of the first ten natural numbers is,
//     pow(1,2) + pow(2,2) + ... + pow(10,2) = 385
// The square of the sum of the first ten natural numbers is,
//     pow((1 + 2 + ... + 10), 2) = pow(55, 2) = 3025
// Hence the difference between the sum of the squares of the 
// first ten natural numbers and the square of the sum is 3025в€’385 = 2640.
// Find the difference between the sum of the squares of the first 
// one hundred natural numbers and the square of the sum.

#include <iostream>
#include <cmath>
#include "MyTools.h"


void TEST()
{
    int MAX = 100;
    
    __int64 sum = 0;
    __int64 sum_sq = 0;
    __int64 result;

    sum = (MAX * MAX + MAX) / 2;
    
    sum_sq = MAX * (MAX + 1) * (2 * MAX + 1) / 6;

    result = sum * sum - sum_sq;
    // std::cout << sum * sum - sum_sq << std::endl;
}

int main()
{
    myProfiler(TEST, 1000000, "Problem 6 - Sum square difference. [sum and sum_sq formulas. 10000]");
    // TEST();
    
    int MAX = 100;

    __int64 sum = 0;
    __int64 sum_sq = 0;
    __int64 result;

    sum = (MAX * MAX + MAX) / 2;

    sum_sq = MAX * (MAX + 1) * (2 * MAX + 1) / 6;

    result = sum * sum - sum_sq;
    std::cout << sum * sum - sum_sq << std::endl;
        
    return 0;
}


//###### Problem 7 - 10001st prime
// By listing the first six prime numbers: 
// 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.
// What is the 10 001st prime number ?

#include <iostream>
#include <cmath>
#include "MyTools.h"

bool isPrime(__int64 num)
{
    int MAX = (int)sqrt(num) + 1;
    for (int i = 2; i < MAX; i++)
    {
        if (num % i == 0)
        {
            return false;
        }
    }

    return true;
}


void TEST()
{
    int counter = 3;    // prime numbers: 2,3,5
    const int limit = 10001;
    __int64 i = 0;
    __int64 lastPrime = 5;
    const int SIZE = 2;
    __int64 arr[SIZE];

    while (counter < limit)
    {
        ++i;
 
        arr[0] = 6 * i + 1;
        arr[1] = 6 * i + 5;
        
        for (int element : arr)
        {
            if (isPrime(element))
            {
                ++counter;
                lastPrime = element;
            }
            if (counter >= limit)
            {
                break;
            }
        }
        
    }
    
    // std::cout << lastPrime << std::endl;
}

int main()
{
    myProfiler(TEST, 1000, "Problem 7 - 10001st prime. [Version with 6k+1, 6k+5. 10001th]");
    // TEST();
        
    return 0;
}


//###### Problem 7 - 10001st prime
// By listing the first six prime numbers: 
// 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.
// What is the 10 001st prime number ?

#include <iostream>
#include <cmath>
#include "MyTools.h"

bool isPrime(__int64 num)
{
    int MAX = (int)sqrt(num) + 1;
    for (int i = 2; i < MAX; i++)
    {
        if (num % i == 0)
        {
            return false;
        }
    }

    return true;
}

__int64 primeOrder(const int N)
{   // determines approximate size of N-th integer
    // info: https://primes.utm.edu/howmany.html#better 
    
    __int64 pN;

    if (N <= 0)
    {
        return 0;
    }

    if (N < 13)
    {
        pN = 38;     // 12th prime number is 37
        return pN;
    }

    if (N >= 13 && N < 8601)                      // p(N) ~ N * (ln(N) + ln(ln(N)) - 1)
    {
        pN = N * (log(N) + log(log(N)) - 1);
        return pN;
    }

    if (N >= 8601 && N < 15985)   // N * (ln(N) + ln(ln(N)) - 1.0073) < p(N) < N * (ln(N) + ln(ln(N)) - 0.9385)
    {
        pN = N * (log(N) + log(log(N)) - 0.9385);   // upoper bound of the division
        return pN;
    }

    if (N >= 15985)   // p(N) <= N * (ln(N) + ln(ln(N)) - 0.9427)
    {
        pN = N * (log(N) + log(log(N)) - 0.9385);   // upper bound of the division
        return pN;
    }
}

void Eratosthen(bool *arr, const int limit)     
{   // Algorithm - Sieve of Eratosthenes
    // https://younglinux.info/algorithm/sieve
    arr[0] = arr[1] = false;

    for (int i = 2; i * i < limit; ++i)
    {
        if (arr[i])
        {
            for (int j = i * i; j < limit; j += i)
            {
                arr[j] = false;
            }
        }
    }
}


int main()
{
    int N = 10001;
    int limit = primeOrder(N);
    bool* arr = new bool[limit + 1];
    int counter = 0;
    int result = 0;

    for (int i = 0; i <= limit; ++i) { arr[i] = true; }  

    Eratosthen(arr, limit);

    for (int i = 2; i <= limit; ++i)
    {
        if (arr[i])
        {
            ++counter;
        }
        if (counter == N)
        {
            result += i;
            break;
        }
    }
    std::cout << result << std::endl;

    delete[] arr;
    return 0;
}


//###### Problem 7 - 10001st prime - THE ANSWER
// By listing the first six prime numbers: 
// 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.
// What is the 10 001st prime number ?

#include <iostream>
#include <cmath>
#include "MyTools.h"

bool isPrimeNew(__int64 n)
{
    if (n <= 1) { return false; }            // numbers <= 1 are not prime
    else if (n < 4) { return true; }        // 2 and 3 are prime
    else if (n % 2 == 0) { return false; }   // even numbers are not prime
    else if (n < 9) { return true; }        // we have alraedy excluded 4, 6 and 8
    else if (n % 3 == 0) { return false; }
    else
    {
        int r = floor(sqrt(n));    // r is rounded to the greatest integer r so that r*r<=n
        int f = 5;    // 6k - 1, k = 1

        while (f <= r) 
        {
            if (n % f == 0)         // f = 6k - 1
            {
                return false;
            }
            if (n % (f + 2) == 0)   // f + 2 == 6k + 1
            {
                return false;
            }
            f += 6;     // ++k
        }
        return true;        // in all other cases
    }
}


int main()
{
    int limit = 10001;
    int count = 1;       // we know that 2 is prime
    int candidate = 1;
    
    while(count < limit)
    {
        candidate += 2;
        if (isPrimeNew(candidate))
        {
            count++;
        }
    }
    
    std::cout << candidate << std::endl;

    return 0;
}


//###### Problem 8 - Largest product in a series
// The four adjacent digits in the 1000-digit number that 
// have the greatest product are 9 Г— 9 Г— 8 Г— 9 = 5832.
/*
73167176531330624919225119674426574742355349194934
96983520312774506326239578318016984801869478851843
85861560789112949495459501737958331952853208805511
12540698747158523863050715693290963295227443043557
66896648950445244523161731856403098711121722383113
62229893423380308135336276614282806444486645238749
30358907296290491560440772390713810515859307960866
70172427121883998797908792274921901699720888093776
65727333001053367881220235421809751254540594752243
52584907711670556013604839586446706324415722155397
53697817977846174064955149290862569321978468622482
83972241375657056057490261407972968652414535100474
82166370484403199890008895243450658541227588666881
16427171479924442928230863465674813919123162824586
17866458359124566529476545682848912883142607690042
24219022671055626321111109370544217506941658960408
07198403850962455444362981230987879927244284909188
84580156166097919133875499200524063689912560717606
05886116467109405077541002256983155200055935729725
71636269561882670428252483600823257530420752963450
*/
// Find the thirteen adjacent digits in the 1000-digit 
// number that have the greatest product. What is the value of this product?

#include <iostream>
#include <cmath>
#include <string>
#include <fstream>
#include "MyTools.h"

void readFromFile(std::string &text, const char *path = "input.txt")
{
    std::ifstream fin;
    std::string tmp;
    text = "";
    
    try
    {
        fin.open(path);

        while (!fin.eof())
        {
            fin >> tmp;
            text += tmp;
        }
    }
    catch (const std::ifstream::failure &ex)
    {
        std::cout << ex.what() << std::endl;
        std::cout << ex.code() << std::endl;
        std::cout << "[ERROR!] The file is not opened!" << std::endl;
    }

    fin.close();
}

long long int arrayProduct(const char *arr, const int SIZE)
{     // This function will return the sum (!!!) of all digits in the array becuse of max type size is __int64 - not enough
    long long int product = 1;
    for (long long int i = 0; i < SIZE; i++)
    {
        if (arr[i] == '0')        // if one of the digits is 0 then the product will equal 0
        {
            return 0;
        }
        product *= (int)arr[i] - 48;    // ANSI code of '0' = 48
    }
    
    return product;
}

char* arrayCopy(const char* arr, const int SIZE)
{
    char* tmp = new char[SIZE];
    for (int i = 0; i < SIZE; i++)
    {
        tmp[i] = arr[i];
    }
    return tmp;
}

void TEST()
{
    std::string text;
    readFromFile(text);    
    // cin >> text;
    
    int textSize = text.size();
    long long int largestProduct = 0;
    long long int tempProduct = 0;
    int adjacentCount = 13;

    char* adjacentBlock = new char[adjacentCount];
    char* largestBlock = new char[adjacentCount];
    
    int i = 0;
    bool exit = false;
    while (true)
    {

        for (int j = 0; j < adjacentCount; ++j)
        {
            adjacentBlock[j] = text[j + i];
            
            if (adjacentBlock[j] == '\0')
            {
                exit = true;
                break;
            }
        }

        if (exit) { break; };

        tempProduct = arrayProduct(adjacentBlock, adjacentCount);
        if (tempProduct > largestProduct)
        {
            largestProduct = tempProduct;
            largestBlock = arrayCopy(adjacentBlock, adjacentCount);
        }
        ++i;
    }

    
    for (int i = 0; i < adjacentCount; i++)
    {
        // largestBlock[i];
        std::cout << largestBlock[i] << " ";
    }
    std::cout << std::endl;
    

    delete[] adjacentBlock;
    delete[] largestBlock;
}

int main()
{
    // TEST();
    myProfiler(TEST, 1000, "Problem 8 - Largest product in a series [Simple version #1]");

    return 0;
}


//###### Problem 9 - Special Pythagorean triplet
// A Pythagorean triplet is a set of three natural numbers, a < b < c, for which,
//     a^2 + b^2 = c^2
// For example, 3^2 + 4^2 = 9 + 16 = 25 = 5^2.
// There exists exactly one Pythagorean triplet for which a + b + c = 1000.
// Find the product abc.

#include <iostream>
#include <fstream>
#include "MyTools.h"


int GCD(int a, int b)     // Greater Common Divisor
{
    while (a != 0 and b != 0)
    {
        if (a > b)
        {
            a = a % b;
        }
        else
        {
            b = b % a;
        }
    }

    return a + b;
}

void myDecision()
{
    int a, b, c = 3;    // a < b < c
    int sumABC = 1000;
    bool flag = false;

    for (a = sumABC / 4 - 1; a > 1; --a)
    {
        for (b = sumABC / 2 - 1; b > 2; --b)
        {
            c = sumABC - a - b;

            if (c * c == (a * a + b * b))
            {
                flag = true;
                break;
            }
        }

        if (flag) { break; }
    }

    std::cout << a << ", " << b << ", " << c << "\n";
    std::cout << a * b * c << "\n";
}


void projecteuler_1()
{
    int a, b, c = 3;    // a < b < c
    int s = 1000;

    for (a = 3; a <= (s - 3) / 3; ++a)
    {
        for (b = (a + 1); b <= (s - 1 - a) / 2; ++b)
        {
            c = s - a - b;
            if (c*c == a*a + b*b)
            {
                std::cout << a << ", " << b << ", " << c << "\n";
                std::cout << a * b * c << "\n";
            }
        }
    }
}


void projecteuler_2()
{
    int a, b, c, s, s2, n, m, sm, k, d;
    s = 1000;
    s2 = s / 2;

    for (m = 2; m < ceil(sqrt(s2)) + 1; ++m)
    {
        if (s2 % m == 0)
        {
            sm = s2 / m;
            while (sm % 2 == 0) { sm /= 2; }       // reduce the search space by removing all factors 2
            
            if (m % 2 == 1) { k = m + 2; } else { k = m + 1; }

            while (k < 2 * m && k <= sm)
            {
                if (sm % k == 0 && GCD(k, m) == 1)
                {
                    d = s2 / (k * m);
                    n = k - m;
                    a = 2 * d * m * n;
                    b = d * (m * m - n * n);
                    c = d * (m * m + n * n);

                    //std::cout << a << ", " << b << ", " << c << "\n";
                    //std::cout << a * b * c << "\n";
                    return;
                }
                k += 2;
            }
        }
    }
}



int main()
{
    setlocale(LC_ALL, "rus");
    myProfiler(projecteuler_2, 1000, "Problem 9 - Special Pythagorean triplet [The project version #2]");
   // projecteuler_2();

    return 0;
}


//###### Problem 10 - Summation of primes
// The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.
// Find the sum of all the primes below two million.

#include <iostream>
#include <cmath>
#include "MyTools.h"

void Eratosphen(bool *isPrime, const long long int N)
{
    for (long long int i = 0; i < N + 1; ++i)
    {
        isPrime[i] = true;
    }

    isPrime[0] = false;
    isPrime[1] = false;

    for (long long int i = 2; i*i < N; ++i)
    {
        if (isPrime[i])
        {
            for (long long int j = i*i; j <= N; j += i)
            {
                isPrime[j] = false;
            }
        }
    }


}

void TEST()
{
    long long int N = 2000000;
    bool *arr = new bool [N+1];
    Eratosphen(arr, N);
    long long int sum = 0;

    for (long long int i = 0; i <= N; ++i)
    {
        if (arr[i])
        {
            sum += i;
        }
    }
    std::cout << "The sum of primes up to " << N << " equals:\n" << sum << "\n";
}

int main()
{
    // myProfiler(TEST, 1, "Problem 10 - Summation of primes. [My version #1]");
    TEST();

    return 0;
}


//###### Problem 10 - Summation of primes
// The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.
// Find the sum of all the primes below two million.

#include <iostream>
#include <cmath>
#include "MyTools.h"

void Eratosphen(bool *isPrime, const long long int N)
{
    for (long long int i = 0; i < N + 1; ++i)
    {
        isPrime[i] = true;
    }
    
    isPrime[0] = false;
    isPrime[1] = false;

    for (int i = 4; i <= N; i += 2)     // Exclude all the even numbers
    {
        isPrime[i] = false;
    }

    for (long long int i = 3; i*i <= N; i += 2)    // The step equals 2
    {
        if (isPrime[i])
        {
            for (long long int j = i*i; j <= N; j += (2 * i))    // step = 2 * i
            {
                isPrime[j] = false;
            }
        }
    }


}


void TEST()
{
    long long int N = 2000000;
    bool *arr = new bool [N+1];
    Eratosphen(arr, N);
    long long int sum = 0;
    /*
    //////////////////////////////////////////
    for (int i = 0; i <= N; ++i)
    {
        std::cout << arr[i] << " "; 
    }
    std::cout << "\n\n";
    //////////////////////////////////////////
    */
    for (long long int i = 0; i <= N; ++i)
    {
        if (arr[i])
        {
            sum += i;
        }
    }
    //std::cout << "The sum of primes up to " << N << " equals:\n" << sum << "\n";
}

int main()
{
    myProfiler(TEST, 1, "Problem 10 - Summation of primes. [My version #1]");
    //TEST();

    return 0;
}



//###### Problem 10 - Summation of primes
// The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.
// Find the sum of all the primes below two million.

#include <iostream>
#include <cmath>
#include "MyTools.h"
/*
void Eratosphen(bool *isPrime, const long long int N)
{
    for (long long int i = 0; i < N + 1; ++i)
    {
        isPrime[i] = true;
    }

    int limit = (int)sqrt(N);
    isPrime[0] = false;
    isPrime[1] = false;

    for (int i = 4; i <= N; i += 2)     // even numbers > 2
    {
        isPrime[i] = false;
    }

    for (long long int i = 3; i <= limit; i += 2)
    {
        if (isPrime[i])
        {
            for (long long int j = i*i; j <= N; j += 2 * i)
            {
                isPrime[j] = false;
            }
        }
    }
}

void TEST()
{
    long long int N = 2000000;
    bool *arr = new bool [N+1];
    Eratosphen(arr, N);
    long long int sum = 0;

    for (long long int i = 0; i <= N; ++i)
    {
        if (arr[i])
        {
            sum += i;
        }
    }
    std::cout << "The sum of primes up to " << N << " equals:\n" << sum << "\n";
}
*/
void Eratosphen2(const long long int limit)
{
    long long int sievebound = (limit - 1) / 2;      // last index of sieve
    bool *sieve = new bool[sievebound + 1];                // sieve - bool array of size = (sievebound + 1)
    for (long long int i = 0; i <= sievebound; ++i)  // fill sieve with FALSEs
    {
        sieve[i] = false;
    }
    int crosslimit = ((int)sqrt(limit) - 1) / 2;     // the limit of cross for prime numbers

    for (int i = 1; i <= crosslimit; ++i)
    {
        if (!sieve[i])       // if (2*i+1) is primw, then mark all its multiples
        {
            for (long long int j = 2 * i * (i + 1);  j <= sievebound; j += 2 * i + 1)
            {
                sieve[j] = true;
            }
        }
    }

    long long int sum = 2;       // 2 is prime
    for (long long int i = 1; i <+ sievebound; ++i)
    {
        if (!sieve[i])
        {
            sum += 2 * i + 1;
        }
    }

    //std::cout << sum << "\n";
}

void TEST1()
{
    long long int N = 2000000;

    Eratosphen2(N);
}

int main()
{
    myProfiler(TEST1, 1, "Problem 10 - Summation of primes. [ProjectEuler.net version #2]");
    //TEST1();

    return 0;
}


/*
###### Problem 11 - Largest product in a grid
In the 20×20 grid below, four numbers along a diagonal line have been marked in red.

08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08
49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00
81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65
52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91
22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80
24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50
32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70
67 26 20 68 02 62 12 20 95 63 94 39 63 08 40 91 66 49 94 21
24 55 58 05 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72
21 36 23 09 75 00 76 44 20 45 35 14 00 61 33 97 34 31 33 95
78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92
16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57
86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58
19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40
04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66
88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69
04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36
20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16
20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54
01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48

The product of these numbers is 26 × 63 × 78 × 14 = 1788696.
What is the greatest product of four adjacent numbers in the same direction(up, down, left, right, or diagonally) in the 20×20 grid ?
*/
#include <iostream>
#include <fstream>
#include "MyTools.h"
using namespace std;

void fillArray2D(int** arr, const int rows, const int cols, const char filePath[])
{   // Filling in a Two-dimensional (2D) array
	// Create an object of class ifstream and 
	// immediately specify the file from which we will read:
	ifstream f(filePath);

	// Read the file and remember what we read in the array
	for (int i = 0; i < rows; ++i)
	{
		for (int j = 0; j < cols; ++j)
		{
			f >> arr[i][j];
		}
	}
}

void printArray2D(int** arr, const int rows, const int cols, const int W = 2)
{
	std::cout.fill('0');

	std::cout << "     ";
	for (int j = 0; j < cols; ++j)
	{
		std::cout.width(W);
		std::cout << j << " ";
	}
	std::cout << "\n" << endl;

	for (int i = 0; i < rows; ++i)
	{
		std::cout.width(W);
		std::cout << i << "   ";
		for (int j = 0; j < cols; ++j)
		{
			std::cout.width(W);
			std::cout << arr[i][j] << " ";
		}
		std::cout << "\n";
	}
}

int maxProdInRows(int** array, const int rows, const int cols, const int blockLength, int maxProd)
{
	int prod;        // temporary production

	for (int i = 0; i < rows; ++i)
	{
		for (int j = 0; j <= (cols - blockLength); ++j)
		{
			prod = 1;
			for (int k = j; k < (j + blockLength); ++k)
			{
				if (array[i][k] == 0)
				{
					break;
				}
				else
				{
					prod *= array[i][k];
				}
			}

			if (prod > maxProd)
			{
				maxProd = prod;
				/*
				std::cout << "Prod = " << prod << "\t string: " << i << "\tnumders: ";
				for (int m = j; m < (j + blockLength); ++m)
				{
					std::cout << array[i][m] << " ";
				}
				std::cout << endl;
				*/
			}
		}
	}

	return maxProd;
}

int maxProdInCols(int** array, const int rows, const int cols, const int blockLength, int maxProd)
{
	int prod;        // temporary production

	for (int i = 0; i < cols; ++i)
	{
		for (int j = 0; j <= (rows - blockLength); ++j)
		{
			prod = 1;
			for (int k = j; k < (j + blockLength); ++k)
			{
				if (array[k][i] == 0)
				{
					break;
				}
				else
				{
					prod *= array[k][i];
				}
			}

			if (prod > maxProd)
			{
				maxProd = prod;
				/*
				std::cout << "Prod = " << prod << "\t column: " << i << "\tnumders: ";
				for (int m = j; m < (j + blockLength); ++m)
				{
					std::cout << array[m][i] << " ";
				}
				std::cout << endl;
				*/
			}
		}
	}

	return maxProd;
}

int maxProdInDiagULDR(int** array, const int rows, const int cols, const int blockLength, int maxProd)
{
	int prod;        // temporary production

	for (int i = 0; i <= (rows - blockLength); ++i)
	{
		for (int j = 0; j <= (cols - blockLength); ++j)
		{
			prod = 1;
			for (int k = 0; k < blockLength; ++k)
			{
				if (array[i + k][j + k] == 0)
				{
					prod = 1;     // reset to the default value
					break;
				}
				else
				{
					prod *= array[i + k][j + k];
				}
			}

			if (prod > maxProd)
			{
				maxProd = prod;
				/*
				cout << "Prod = " << prod << "\t diagonal ULDR: (" << i << "," << j << ")\tnumders: ";
				for (int m = 0; m < blockLength; ++m)
				{
					cout << array[i + m][j + m] << " ";
				}
				cout << endl;
				*/
			}
		}
	}

	return maxProd;
}

int maxProdInDiagURDL(int** array, const int rows, const int cols, const int blockLength, int maxProd)
{
	int prod;        // temporary production
	int element;

	for (int i = 0; i <= (rows - blockLength); ++i)
	{
		for (int j = (blockLength - 1); j < cols; ++j)
		{
			prod = 1;
			for (int k = 0; k < blockLength; ++k)
			{
				element = array[i + k][j - k];
				if (element == 0)
				{
					prod = 1;     // reset to the default value
					break;
				}
				else
				{
					prod *= element;
				}
			}

			if (prod > maxProd)
			{
				maxProd = prod;
				/*
				std::cout << "Prod = " << prod << "\t diagonal URDL: (" << i << "," << j << ")\tnumders: ";
				for (int m = 0; m < blockLength; ++m)
				{
					std::cout << array[i + m][j - m] << " ";
				}
				std::cout << endl;
				*/
			}
		}
	}

	return maxProd;
}

void TEST()
{
	int row = 20;
	int column = 20;
	int blockLength = 4;a
	int result = 0;

	int** array = new int* [row];

	// Two-dimensional (2D) array  initialization
	for (int i = 0; i < row; ++i)
	{
		array[i] = new int[column];
	}

    fillArray2D(array, row, column, "array.txt");
	
	// std::cout << endl;
	// printArray2D(array, row, column, 2);
	// std::cout << endl;
	
	// std::cout << "#### IN ROWS: ####" << endl;
	result = maxProdInRows(array, row, column, blockLength, result);
	// std::cout << "#### IN COLUMNS: ####" << endl;
	result = maxProdInCols(array, row, column, blockLength, result);
	// std::cout << "#### IN DIAGONAL ULDR: ####" << endl;
	result = maxProdInDiagULDR(array, row, column, blockLength, result);
	// std::cout << "#### IN DIAGONAL URDL: ####" << endl;
	result = maxProdInDiagURDL(array, row, column, blockLength, result);

	std::cout << endl << result << endl;
}

int main()
{
	myProfiler(TEST, 1, "Problem 11 - Largest product in a grid [My version #1]");
	// TEST();
	return 0;
}



/*
###### Problem 11 - Largest product in a grid
In the 20×20 grid below, four numbers along a diagonal line have been marked in red.

08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08
49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00
81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65
52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91
22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80
24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50
32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70
67 26 20 68 02 62 12 20 95 63 94 39 63 08 40 91 66 49 94 21
24 55 58 05 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72
21 36 23 09 75 00 76 44 20 45 35 14 00 61 33 97 34 31 33 95
78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92
16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57
86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58
19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40
04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66
88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69
04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36
20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16
20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54
01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48

The product of these numbers is 26 × 63 × 78 × 14 = 1788696.
What is the greatest product of four adjacent numbers in the same direction(up, down, left, right, or diagonally) in the 20×20 grid ?
*/
#include <iostream>
#include <fstream>
#include "MyTools.h"
using namespace std;

void fillArray2D(int** arr, const int rows, const int cols, const char filePath[])
{   // Filling in a Two-dimensional (2D) array
	// Create an object of class ifstream and 
	// immediately specify the file from which we will read:
	ifstream f(filePath);

	// Read the file and remember what we read in the array
	for (int i = 0; i < rows; ++i)
	{
		for (int j = 0; j < cols; ++j)
		{
			f >> arr[i][j];
		}
	}
}

void printArray2D(int** arr, const int rows, const int cols, const int W = 2)
{
	std::cout.fill('0');

	std::cout << "     ";
	for (int j = 0; j < cols; ++j)
	{
		std::cout.width(W);
		std::cout << j << " ";
	}
	std::cout << "\n" << endl;

	for (int i = 0; i < rows; ++i)
	{
		std::cout.width(W);
		std::cout << i << "   ";
		for (int j = 0; j < cols; ++j)
		{
			std::cout.width(W);
			std::cout << arr[i][j] << " ";
		}
		std::cout << "\n";
	}
}

void printArray(int* arr, const int N, const int W = 2)
{
	std::cout.fill('0');

	for (int i = 0; i < N; ++i)
	{
		std::cout.width(W);
		std::cout << arr[i] << " ";
	}
	std::cout << "\n";
}

int maxProdInRows(int** array, const int rows, const int cols, const int blockLength, int maxProd, int *maxNumArr)
{
	int prod;        // temporary production
	int* tmpArr = new int[blockLength];    // an array for storage of adjacent numbers
	int m;          // temporary index for tmpArr

	for (int i = 0; i < rows; ++i)
	{
		for (int j = 0; j <= (cols - blockLength); ++j)
		{
			prod = 1;
			m = 0;

			for (int k = j; k < (j + blockLength); ++k, ++m)
			{
				if (array[i][k] == 0)
				{
					break;
				}
				else
				{
					prod *= array[i][k];
					tmpArr[m] = array[i][k];
				}
			}

			if (prod > maxProd)
			{
				maxProd = prod;
				
				for (int m = 0; m < blockLength; ++m)
				{
					maxNumArr[m] = tmpArr[m];
				}
			}
		}
	}

	delete[] tmpArr;

	return maxProd;
}

int maxProdInCols(int** array, const int rows, const int cols, const int blockLength, int maxProd, int *maxNumArr)
{
	int prod;        // temporary production
	int* tmpArr = new int[blockLength];    // an array for storage of adjacent numbers
	int m;          // temporary index for tmpArr

	for (int i = 0; i < cols; ++i)
	{
		for (int j = 0; j <= (rows - blockLength); ++j)
		{
			prod = 1;
			m = 0;

			for (int k = j; k < (j + blockLength); ++k, ++m)
			{
				if (array[k][i] == 0)
				{
					break;
				}
				else
				{
					prod *= array[k][i];
					tmpArr[m] = array[k][i];
				}
			}

			if (prod > maxProd)
			{
				maxProd = prod;

				for (int m = 0; m < blockLength; ++m)
				{
					maxNumArr[m] = tmpArr[m];
				}
			}
		}
	}

	delete[] tmpArr;

	return maxProd;
}

int maxProdInDiagULDR(int** array, const int rows, const int cols, const int blockLength, int maxProd, int* maxNumArr)
{
	int prod;        // temporary production
	int* tmpArr = new int[blockLength];    // an array for storage of adjacent numbers
	int m;          // temporary index for tmpArr

	for (int i = 0; i <= (rows - blockLength); ++i)
	{
		for (int j = 0; j <= (cols - blockLength); ++j)
		{
			prod = 1;
			m = 0;

			for (int k = 0; k < blockLength; ++k)
			{
				if (array[i + k][j + k] == 0)
				{
					prod = 1;     // reset to the default value
					break;
				}
				else
				{
					prod *= array[i + k][j + k];
				}
			}

			if (prod > maxProd)
			{
				maxProd = prod;

				for (int m = 0; m < blockLength; ++m)
				{
					maxNumArr[m] = tmpArr[m];
				}
			}
		}
	}
	
	delete[] tmpArr;

	return maxProd;
}

int maxProdInDiagURDL(int** array, const int rows, const int cols, const int blockLength, int maxProd, int* maxNumArr)
{
	int prod;        // temporary production
	int element;
	int* tmpArr = new int[blockLength];    // an array for storage of adjacent numbers
	int m;          // temporary index for tmpArr

	for (int i = 0; i <= (rows - blockLength); ++i)
	{
		for (int j = (blockLength - 1); j < cols; ++j)
		{
			prod = 1;
			m = 0;

			for (int k = 0; k < blockLength; ++k, ++m)
			{
				element = array[i + k][j - k];
				if (element == 0)
				{
					prod = 1;     // reset to the default value
					break;
				}
				else
				{
					prod *= element;
					tmpArr[m] = element;
				}
			}

			if (prod > maxProd)
			{
				maxProd = prod;

				for (int m = 0; m < blockLength; ++m)
				{
					maxNumArr[m] = tmpArr[m];
				}
			}
		}
	}

	delete[] tmpArr;

	return maxProd;
}

void TEST()
{
	int row = 20;
	int column = 20;
	int blockLength = 4;
	int result = 0;
	int* maxNumArr = new int[blockLength];
	int** array = new int* [row];

	// Initialization of an array for storage of max adjacent numbers
	for (int i = 0; i < blockLength; ++i)
	{
		maxNumArr[i] = 0;
	}

	// Two-dimensional (2D) array  initialization
	for (int i = 0; i < row; ++i)
	{
		array[i] = new int[column];
	}

    fillArray2D(array, row, column, "array.txt");
	
	// std::cout << endl;
	// printArray2D(array, row, column, 2);
	// std::cout << endl;
	
	std::cout << "#### IN ROWS: ####" << endl;
	result = maxProdInRows(array, row, column, blockLength, result, maxNumArr);
	printArray(maxNumArr, blockLength, 2);
	std::cout << std::endl;

	std::cout << "#### IN COLUMNS: ####" << endl;
	result = maxProdInCols(array, row, column, blockLength, result, maxNumArr);
	printArray(maxNumArr, blockLength, 2);
	std::cout << std::endl;

	std::cout << "#### IN DIAGONAL ULDR: ####" << endl;
	result = maxProdInDiagULDR(array, row, column, blockLength, result, maxNumArr);
	printArray(maxNumArr, blockLength, 2);
	std::cout << std::endl;

	std::cout << "#### IN DIAGONAL URDL: ####" << endl;
	result = maxProdInDiagURDL(array, row, column, blockLength, result, maxNumArr);
	printArray(maxNumArr, blockLength, 2);
	std::cout << std::endl;

	std::cout << result << endl;

	delete[] maxNumArr;

	for (int i = 0; i < row; ++i)
	{
		delete[] array[i];
	}
	delete[] array;
}

int main()
{
	// myProfiler(TEST, 1, "Problem 11 - Largest product in a grid [My version #1]");
	TEST();
	return 0;
}



/*
###### Problem 12 - Highly divisible triangular number
The sequence of triangle numbers is generated by adding the natural numbers. 
So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. 
The first ten terms would be:
1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
Let us list the factors of the first seven triangle numbers:
 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.
What is the value of the first triangle number to have over five hundred divisors?
*/

#include <iostream>
#include "MyTools.h"
#include <algorithm>    // std::sort
#include <vector>       // std::vector
using namespace std;

int divCount(long long int n)
{
    int c = 0;                       // counter of dividers
    int i;
    int max = sqrt(1.0 * n);

    for (i = 1; i < max; ++i)
    {
        if (n % i == 0)
        {
            c += 2;              // dividers' number = 2 (n and (n/i))
        }
    }

    if (n % max == 0)                  // if n is full square then sqrt(n) == n/sqrt(n)
    {
        ++c;
    }

    return c;
}

void TEST()
{
    int maxCount = 500;
    long long int t = 3;
    long long int a = 3;

    while (divCount(t) <= maxCount)
    {
        t += a;
        ++a;
    }

    cout << endl << t << endl;
}

int divCount1(long long int n, vector<int> &v)
{
    int c = 0;                       // counter of dividers
    int i;

    v.clear();

    for (i = 1; i < sqrt(1.0 * n); ++i)
    {
        if (n % i == 0)          
        {         
            v.push_back(i);          // if i is a divider ...
            v.push_back(n / i);      // then (n / i) is a divider too
            c += 2;              // dividers' number = 2
        }
    }

    i = sqrt(1.0 * n);
    if (n % i == 0)                  // if n is full square then sqrt(n) == n/sqrt(n)
    {
        v.push_back(i);              // so add only one number - sqrt(n);
        ++c;
    }

    return c;
}

void TEST1()
{
    int maxCount = 500;
    long long int triang = 3;
    long long int nextNumber = 3;
    vector<int> vect;
    
    while (true)
    {
        triang += nextNumber;
        ++nextNumber;

        if (divCount1(triang, vect) > maxCount) { break; }
    }

    sort(vect.begin(), vect.end());
    for (int x : vect) { cout << x << " "; }
    
    cout << endl << triang << endl;
}

int main()
{
    // TEST();
    myProfiler(TEST, 1, "Problem 12 - Highly divisible triangular number [My version #1]");

    return 0;
}



/*
###### Problem 12 - Highly divisible triangular number ###### +ANSWERS
The sequence of triangle numbers is generated by adding the natural numbers.
So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
The first ten terms would be:
1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
Let us list the factors of the first seven triangle numbers:
 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.
What is the value of the first triangle number to have over five hundred divisors?
*/

#include <iostream>
#include "MyTools.h"
#include <algorithm>    // std::sort
#include <vector>       // std::vector
using namespace std;

bool isPrime(__int64 n)
{
    if (n <= 1) { return false; }            // numbers <= 1 are not prime
    else if (n < 4) { return true; }        // 2 and 3 are prime
    else if (n % 2 == 0) { return false; }   // even numbers are not prime
    else if (n < 9) { return true; }        // we have alraedy excluded 4, 6 and 8
    else if (n % 3 == 0) { return false; }
    else
    {
        int r = floor(sqrt(n));    // r is rounded to the greatest integer r so that r*r<=n
        int f = 5;    // 6k - 1, k = 1

        while (f <= r)
        {
            if (n % f == 0)         // f = 6k - 1
            {
                return false;
            }
            if (n % (f + 2) == 0)   // f + 2 == 6k + 1
            {
                return false;
            }
            f += 6;     // ++k
        }
        return true;        // in all other cases
    }
}

void getPrimeVector(vector<int>& vectorOfPrimes, const int primeBound)
{
    vectorOfPrimes[0] = 2;

    for (int j = 3; j < primeBound; j += 2)
    {
        if (isPrime(j))
        {
            vectorOfPrimes.push_back(j);
        }
    }
}

void TEST_ANSWER1()
{
    int primeBound = 65500;                  // max bound for prime numbers
    vector<int> primeVector(1, 0);

    getPrimeVector(primeVector, primeBound);
    // cout << primeVector.size() << endl;

    int triang = 1;       // N = p1^a1 * p2^a2 * ...
    int nextNum = 1;      // triang += nextNum;
    int count = 0;        // D(N) = (a1+1) * (a2+1) * ...; aX - an exponent
    int maxCount = 500;
    int tempTriang, exponent, X;

    while (count <= maxCount)
    {
        count = 1;
        ++nextNum;
        triang += nextNum;
        tempTriang = triang;

        for (int i = 0; i < primeVector.size(); ++i)
        {
            X = primeVector[i];

            if (X * X > tempTriang) // When the prime divisor would be greater than the residual tempTriang,
            {                       // that residual tempTriang is the last prime factor with an exponent=1
                count *= 2;        // No necessity to identify it.
                break;
            }

            exponent = 0;

            while (tempTriang % X == 0)
            {
                ++exponent;
                tempTriang /= X;
            }

            if (exponent > 0) { count *= (exponent + 1); }  // D(N) = (a1+1) * (a2+1) * ...;

            if (tempTriang == 1) { break; }
        }
    }

    cout << triang << endl;
}

void TEST_ANSWER2()
{
    int primeBound = 1000;                  // max bound for prime numbers
    vector<int> primeVector(1, 0);

    getPrimeVector(primeVector, primeBound);
    
    // triang = n*(n+1)/2;          // triang is n'th triangle number 
    // D(t) = D(n/2)*D(n+1) if n is even
    // or D(t) = D(n)*(D((n+1)/2) if (n+1) is even

    int n = 3;                      // start with a prime. 
    int Dn = 2;                     // number of divisor of any prime (D(3) = 2)
    int count = 0;                  // to ensure the while loop is entered
    int maxCount = 500;
    int n1, Dn1, exponent, X;

    while (count <= maxCount)
    {
        n = n + 1;
        n1 = n;
        if (n1 % 2 == 0) { n1 /= 2; }
        Dn1 = 1;

        for (int i = 0; i < primeVector.size(); ++i)
        {
            X = primeVector[i];
            if (X * X > n1)
            {
                Dn1 *= 2;           // When the prime divisor would be greater than the residual n1,
                break;              // that residual n1 (!!! n1 !!!) is the last prime factor with an exponent=1
                                    // No necessity to identify it.  
            }

            exponent = 0;
            while (n1 % X == 0)
            {
                ++exponent;
                n1 /= X;
            }

            if (exponent > 0) { Dn1 *= (exponent + 1); }

            if (n1 == 1) { break; }
        }
        count = Dn * Dn1;
        Dn = Dn1;
        // cout << "INFO: n = " << n - 1 << ";\ttriange number = " << ((n - 1) * n) / 2 << ";\tcount = " << count << endl;
    }

    cout << ((n - 1) * n) / 2 << endl;     // (n-1) is because n = n + 1 in the main while loop
}

void primeTestFromSTDIN()
{
    long long int x;

    do
    {
        try
        {
            cout << "Enter a number:\t";
            cin >> x;
            cin.clear();
            cin.ignore(32767, '\n');

            if (x < 1 || x > 2147483647)
            {
                throw exception("the number is not in range [1..2147483647]");
                continue;
            }

            if (isPrime(x))
            {
                cout << x << " - prime\n";
            }
            else
            {
                cout << x << " - composite\n";
            }
        }
        catch (const std::exception& ex)
        {
            cout << "[ERROR:] " << ex.what() << endl;
            continue;
        }
    } while (true);
}

int divCount(long long int n)
{
    int c = 0;                       // counter of dividers
    int i;
    int max = sqrt(1.0 * n);

    for (i = 1; i < max; ++i)
    {
        if (n % i == 0)
        {
            c += 2;              // dividers' number = 2 (n and (n/i))
        }
    }

    if (n % max == 0)                  // if n is full square then sqrt(n) == n/sqrt(n)
    {
        ++c;
    }

    return c;
}

void TEST()
{
    int maxCount = 500;
    long long int t = 3;
    long long int a = 3;

    while (divCount(t) <= maxCount)
    {
        t += a;
        ++a;
    }

    cout << endl << t << endl;
}

int divCount1_vector(long long int n, vector<int>& v)
{
    int c = 0;                       // counter of dividers
    int i;

    v.clear();

    for (i = 1; i < sqrt(1.0 * n); ++i)
    {
        if (n % i == 0)
        {
            v.push_back(i);          // if i is a divider ...
            v.push_back(n / i);      // then (n / i) is a divider too
            c += 2;              // dividers' number = 2
        }
    }

    i = sqrt(1.0 * n);
    if (n % i == 0)                  // if n is full square then sqrt(n) == n/sqrt(n)
    {
        v.push_back(i);              // so add only one number - sqrt(n);
        ++c;
    }

    return c;
}

void TEST1_vector()
{
    int maxCount = 500;
    long long int triang = 3;
    long long int nextNumber = 3;
    vector<int> vect;

    while (true)
    {
        triang += nextNumber;
        ++nextNumber;

        if (divCount1_vector(triang, vect) > maxCount) { break; }
    }

    sort(vect.begin(), vect.end());
    for (int x : vect) { cout << x << " "; }

    cout << endl << triang << endl;
}

int main()
{
    // TEST();
    myProfiler(TEST_ANSWER2, 1, "Problem 12 - Highly divisible triangular number [Version - ANSWER #2]");
    // primeTestFromSTDIN();
    // TEST_();

    return 0;
}



/*
###### Problem 13 - Large sum ###### ANSWER --> https://euler.stephan-brumme.com/13/
Work out the first ten digits of the sum of the following one-hundred 50-digit numbers.
37107287533902102798797998220837590246510135740250
46376937677490009712648124896970078050417018260538
...
20849603980134001723930671666823555245252804609722
72107838435069186155435662884062257473692284509516
*/

#include <iostream>
#include <string>
#include <vector>
#include "MyTools.h"

void TEST()
{
    // --> https://euler.stephan-brumme.com/13/
    // store each digit separately
    // input has 50 digits
    // highest digits might overflow and require a few extra digits
    // (I believe +2 would suffice, too)
    const int MinDigits = 50 + 10;
    // all digits are initially zero, least significant has index 0
    std::vector<int> sum(MinDigits, 0);
    // the resulting number will be sum[0] + 10*sum[1] + 100*sum[2] + ...

    int numbers = 100;        // a number of numbers which we are added

#define ORIGINAL
#ifndef ORIGINAL                  // if NOT ORIGINAL then input number of numbers from STDIN
    std::cin >> numbers;
#endif

    while (numbers--)
    {
        // read a single number as a string
        std::string strAdd;
        std::cin >> strAdd;

        // convert to digits
        std::vector<int> add;
        // process string in reverse: least significant digits first
        for (auto i = strAdd.rbegin(); i != strAdd.rend(); i++)
            add.push_back(*i - '0'); // convert from ASCII
        // fill high/unused positions with zeros
        add.resize(sum.size(), 0);

        // add all digits
        for (int i = 0; i < add.size(); i++)
        {
            sum[i] += add[i];

            // overflow ? => sum[i] is 10 .. 18
            if (sum[i] >= 10)
            {
                sum[i + 1]++; // sum[i + 1] = sum[i] % 10
                sum[i] -= 10; // sum[i]    %= 10
            }
        }
    }

    // skip high zeros
    auto i = sum.rbegin();             // i - reverse_iterator
    while (*i == 0)
        i++;

    // print first ten digits
    int numDigits = 10;
    while (numDigits-- > 0)
        std::cout << *i++;
}

int main()
{
    myProfiler(TEST, 1, "Problem 13 - Large sum [Version - #1]");

    return 0;
}



/*
###### Problem 14 - Longest Collatz sequence
The following iterative sequence is defined for the set of positive integers:
n → n/2 (n is even)
n → 3n + 1 (n is odd)
Using the rule above and starting with 13, we generate the following sequence:
13 → 40 → 20 → 10 → 5 → 16 → 8 → 4 → 2 → 1
It can be seen that this sequence (starting at 13 and finishing at 1) contains 10 terms. 
Although it has not been proved yet (Collatz Problem), it is thought that all starting 
numbers finish at 1.
Which starting number, under one million, produces the longest chain?
NOTE: Once the chain starts the terms are allowed to go above one million.
*/

#include <iostream>
#include "MyTools.h"
using namespace std;

int CollatzSeqCounter(int n)
{
    unsigned int cnt = 1;
    //cout << n << " ";
    if (n == 1) { return cnt; }

    while (n != 1)
    {
        if (n % 2 == 0)
        {
            ++cnt;
            n = n >> 1;
        }
        else
        {
            ++cnt;
            n = n + n + n + 1;
        }
        //cout << n << " ";
    }

    //cout << endl;
    return cnt;
}

void TEST()
{
    int upperBound = 100000;
    int n;
    int c, Cmax = 1;

    for (int i = 1; i < upperBound; ++i)
    {
        c = CollatzSeqCounter(i);

        if (c > Cmax)
        {
            Cmax = c;
            n = i;
        }
    }

    cout << endl << n << " - " << Cmax << endl;
}

int main()
{
    // TEST();
    myProfiler(TEST, 1, "Problem 14 -  [Version #1 - straight]");

    return 0;
}



/*
###### Problem 14 - Longest Collatz sequence - WITH THE BEST VERSION (without the answer of EulerProject because of problems of C++ compatibility)
The following iterative sequence is defined for the set of positive integers:
n → n/2 (n is even)
n → 3n + 1 (n is odd)
Using the rule above and starting with 13, we generate the following sequence:
13 → 40 → 20 → 10 → 5 → 16 → 8 → 4 → 2 → 1
It can be seen that this sequence (starting at 13 and finishing at 1) contains 10 terms.
Although it has not been proved yet (Collatz Problem), it is thought that all starting
numbers finish at 1.
Which starting number, under one million, produces the longest chain?
NOTE: Once the chain starts the terms are allowed to go above one million.
*/

#include <iostream>
#include "MyTools.h"
using namespace std;

int CollatzSeqCounter(long long int n)      // My direct approach
{
    int cnt = 1;
    
    if (n == 1) { return cnt; }

    while (n != 1)
    {
        if (n % 2 == 0)
        {
            ++cnt;
            n = n >> 1;
        }
        else
        {
            ++cnt;
            n = n + n + n + 1;
        }
    }
    return cnt;


}

void TEST_my_direct_approach()           // My direct approach
{
    const int upperBound = 1000000;
    long int n;
    long int c, Cmax = 1;

    for (long long int number = 1; number < upperBound; ++number)
    {
        c = CollatzSeqCounter(number);

        if (c > Cmax)
        {
            Cmax = c;
            n = number;
        }
    }

    cout << "The starting number " << n << " produces a sequence of " << Cmax << ".\n";
}

void TEST_cache_version()    // source --> https://www.mathblog.dk/project-euler-14/
{
    const int number = 1000000;
    int sequenceLength = 0;
    int startingNumber = 0;
    long long int sequence;

    int *cache = new int[number + 1];
    // Initialise cahce
    for (int i = 0; i < number; i++)
    {
        cache[i] = -1;
    }
    cache[1] = 1;

    for (int i = 2; i < number; ++i)
    {
        sequence = i;
        int k = 0;

        while (sequence != 1 && sequence >= i)
        {
            ++k;
            if (sequence % 2 == 0)
            {
                sequence /= 2;
            }
            else
            {
                sequence = sequence * 3 + 1;
            }
        }
        //Store result in cache
        cache[i] = k + cache[sequence];

        //Check if sequence is the best solution
        if (cache[i] > sequenceLength) 
        {
            sequenceLength = cache[i];
            startingNumber = i;
        }
    }

    cout << "The starting number " << startingNumber << " produces a sequence of " << sequenceLength << ".\n";

    delete[] cache;
}

int main()
{
    // TEST();
    myProfiler(TEST_cache_version, 1, "Problem 14 -  [Version #2 - BEST VERSION]");

    return 0;
}



/*
###### Problem 15 - Lattice paths
Starting in the top left corner of a 2×2 grid, and only being able to move to the right and down, there are exactly 6 routes to the bottom right corner.
How many such routes are there through a 20×20 grid?
*/

#include <iostream>
#include "MyTools.h"
#include <map>
using namespace std;
// ##########################################################################################
// My good version. This version is almost the same as ProjectEuler solution - version 4 
// Info Wikipedia: https://en.wikipedia.org/wiki/Lattice_path
/*
long long factorial(int a)
{
    if (a == 0) { return 1; }
    else { return a * factorial(a - 1); }
}
*/

long long binomial_my_version(int n, int k)    // https://en.wikipedia.org/wiki/Binomial_coefficient
{
    long double res = 1;

    for (int i = 1; i <= k; ++i)
    {
        res *= (long double)(n + 1 - i) / i;     // Multiplicative formula for binomial coefficient
    }

    return (long long)res;
}

void TEST_my_version() 
{
    int x = 20, y = 20;
    int N;
    int K;
    
    // https://en.wikipedia.org/wiki/Lattice_path
    // The number of lattice paths from (0,0) to (p,q) is equal to the binomial coefficient ((p + q) | p).
       
    cout << binomial_my_version((x + y), x) << endl;
}

// ##########################################################################################
// ProjectEuler solution - version 2. Info: https://en.wikipedia.org/wiki/Lattice_path
// We have to declare a cache map variable in the global area
map <pair<int, int>, long long> cache;                // ProjectEuler solution - version 2

// This function depends on the map storage (cache)
long long  func_ProjectEuler_v2(int m, int n)         // ProjectEuler solution - version 2
{
    if (n == 0 || m == 0) { return 1; }

    pair<int, int> p(m, n);

    if (cache[p]) { return cache[p]; }

    cache[p] = func_ProjectEuler_v2(m, n - 1) + func_ProjectEuler_v2(m - 1, n);
    return cache[p];
}

void TEST_ProjectEuler_v2()                             // ProjectEuler solution - version 2
{  
    int M = 20, N = 20;
    cout << func_ProjectEuler_v2(M, N) << endl;
}

// ##########################################################################################
// ProjectEuler solution - version 3. Info: https://en.wikipedia.org/wiki/Lattice_path

long long func_ProjectEuler_v3(int m, int n)            // ProjectEuler solution - version 3
{
    long long res;
    long long **grid = new long long *[m + 1];
    // Array initiation
    for (int i = 0; i < m + 1; ++i) { grid[i] = new long long[n + 1]; }

    for (int i = 0; i <= m; ++i) { grid[i][0] = 1; }

    for (int j = 0; j <= n; ++j) { grid[0][j] = 1; }

    for (int i = 1; i <= m; ++i)
    {
        for (int j = 1; j <= n; ++j)
        {
            grid[i][j] = grid[i - 1][j] + grid[i][j - 1];
        }
    }

    res = grid[m][n];

    // Clear dynamic memory
    for (int i = 0; i < m + 1; ++i) { delete[] grid[i]; }
    delete[] grid;

    return res;
}

void TEST_ProjectEuler_v3()                             // ProjectEuler solution - version 3
{
    int M = 20, N = 20;
    cout << func_ProjectEuler_v3(M, N) << endl;
}

// ##########################################################################################

int main()
{
    // TEST();
    myProfiler(TEST_ProjectEuler_v3, 1, "Problem 15 - Lattice paths [Version #2 - ProjectEuler version 2]");
    return 0;
}



/*
###### Problem 16 - Power digit sum
2^15 = 32768 and the sum of its digits is 3 + 2 + 7 + 6 + 8 = 26.
What is the sum of the digits of the number 2^1000?
*/

#include <iostream>
#include "MyTools.h"
using namespace std;
// ##########################################################################################

void printIntArrayReverse(int* arr, const int size)
{
    for (int i = size - 1; i >= 0; --i) { cout << arr[i]; }
    cout << endl;
}

int sumOfArrayElements(int *arr, const int size)
{
    int sum = 0;
    for (int i = size - 1; i >= 0; --i) { sum += arr[i]; }

    return sum;
}

void TEST()
{
    int pwr = 1000;    // power of number 2
    int x, tmp = 0;
    int size = pwr / 3 + 1;     // The size of decimal number ~ equal (pwr / 3 + 1)

    int* arr1 = new int[size];      
       
    for (int i = 0; i < size; i++) { arr1[i] = 0; }

    // for (int i = 0; i < size; i++) { cout << i << " - " << arr1[i] << endl; }
    // cout << endl;

    arr1[0] = 1;

    for (int i = 1; i <= pwr; i++)
    {
        for (int j = 0; j < size; j++)
        {
            x = arr1[j] + arr1[j] + tmp;
            
            if (x >= 10)
            {
                tmp = 1;
                x %= 10;
            }
            else
            {
                tmp = 0;
            }
            arr1[j] = x;
        }
    }

    printIntArrayReverse(arr1, size);    // Print the resulting number in reversed order
    cout << endl << endl;

    // Calculate the length of the resulting number
    int j = size - 1;     // Last element in array
    int real_size = 0;
    while (true)
    {
        if (arr1[j] == 0) { ++real_size; }
        else { break; }
        --j;
    }
    real_size = size - real_size;   // Calculated size of array + 1

    printIntArrayReverse(arr1, real_size);    // Print the resulting number in reversed order without leading zeroes
    cout << endl << endl;

    cout << "The sum of the array elements is equal to " << sumOfArrayElements(arr1, size) << endl;   // THE ANSWER

    delete[] arr1;
}
// ##########################################################################################
int main()
{
    // TEST();
    myProfiler(TEST, 1, "Problem 16 - Power digit sum [Version #1 - my version]");
    return 0;
}



/*
###### Problem 17 - Number letter counts
If the numbers 1 to 5 are written out in words: one, two, three, four,
five, then there are 3 + 3 + 5 + 4 + 4 = 19 letters used in total.
If all the numbers from 1 to 1000 (one thousand) inclusive were
written out in words, how many letters would be used?
NOTE: Do not count spaces or hyphens. For example, 342 (three
hundred and forty-two) contains 23 letters and 115
(one hundred and fifteen) contains 20 letters. The use of "and" when
writing out numbers is in compliance with British usage.
*/

#include <iostream>
#include <string>
#include <map>
#include "MyTools.h"
using namespace std;
// ##########################################################################################
int gt0lt100(int n)
{
	map<int, string> nums = { {0, ""}, {1,"one"}, {2, "two"}, {3, "three"},
		{4, "four"}, {5, "five"}, {6, "six"}, {7, "seven"}, {8, "eight"}, {9, "nine"},
		{10,"ten"}, {11,"eleven"}, {12,"twelve"}, {13,"thirteen"}, {14,"fourteen"},
		{15,"fifteen"}, {16,"sixteen"}, {17,"seventeen"}, {18,"eighteen"}, {19,"nineteen"},
		{20,"twenty"}, {30,"thirty"}, {40,"forty"}, {50,"fifty"}, {60,"sixty"},
		{70,"seventy"}, {80,"eighty"}, {90,"ninety"}
	};


	if (n >= 11 && n <= 19)
	{
		return nums[n].length();
	}

	return nums[n / 10 * 10].length() + nums[n % 10].length();
}


void TEST()
{
	int c = 0; // counter
	int max = 1000;
	int tmp;

	for (int n = 1; n <= max; n++)
	{
		// count units and decades:
		c += gt0lt100(n % 100);

		// count hundreds:
		tmp = (n % 1000) / 100;
		if (tmp != 0)
		{
			c += gt0lt100(tmp) + 10; 
			if (n % 100 == 0) { c -= 3; }; 
		}

		// count thousands:

		tmp = n / 1000;
		if (tmp != 0)
		{
			c += gt0lt100((n % 10000) / 1000) + 8; // 3210 -> "three thousand". 8 letters in "thousand"
			if (n % 1000 != 0 && n % 1000 / 100 == 0) { c += 3; } // if we don't have hundreds we should add "and" after thousands. Example: 2023 -> "two thousand AND twenty three"
		}

	}

	std::cout << "For the numbers from 1 to " << max << " used " << c << " letters." << endl;
}

// ##########################################################################################
int main()
{
	myProfiler(TEST, 1, "Problem 17 - Number letter counts [Version #1 - slow version]");
	return 0;
}



/*
###### Problem 17 - Number letter counts - VERSION http://euler.stephan-brumme.com/17/
If the numbers 1 to 5 are written out in words: one, two, three, four,
five, then there are 3 + 3 + 5 + 4 + 4 = 19 letters used in total.
If all the numbers from 1 to 1000 (one thousand) inclusive were
written out in words, how many letters would be used?
NOTE: Do not count spaces or hyphens. For example, 342 (three
hundred and forty-two) contains 23 letters and 115
(one hundred and fifteen) contains 20 letters. The use of "and" when
writing out numbers is in compliance with British usage.
*/

// ////////////////////////////////////////////////////////
// # Title
// Number letter counts
//
// # URL
// https://projecteuler.net/problem=17
// http://euler.stephan-brumme.com/17/
//
// # Problem
// If the numbers 1 to 5 are written out in words: one, two, three, four, five, then there are 3 + 3 + 5 + 4 + 4 = 19 letters used in total.
// If all the numbers from 1 to 1000 (one thousand) inclusive were written out in words, how many letters would be used?
//
// __NOTE:__ Do not count spaces or hyphens. For example, 342 (three hundred and forty-two) contains 23 letters
// and 115 (one hundred and fifteen) contains 20 letters. The use of "and" when writing out numbers is in compliance with British usage.
//
// # Solved by
// Stephan Brumme
// February 2017
//
// # Algorithm
// My program converts a number into its "written" representation because of the Hackerrank requirements (see below).
// A simple loop from 1 to 1000 creates a ton of string and computes the sums their lengths.
//
// The function ''convert'' immediately returns the name of numbers in `[0;19]`.
// For all other numbers it calls itself recursively:
// e.g. when the parameter ''x'' is in `[20;99]` then its higher digit is converted directly into a word, its lower is found by a recursive call
//
// My code is a bit bloated because of spelling differences between Project Euler and Hackerrank.
// I had to be a bit careful not to call the function ''convert'' recursively with parameter zero.
//
// # Note
// Rules for finding the English names of numbers have far less exceptions than the German rules ...
//
// # Alternative
// The original problem can be solved by just counting the letter without actually "building" the names, too.
//
// # Hackerrank
// The Hackerrank problem is quite different: you have to convert a number into its name.
// Their spelling rules vary, too.
//
// __Note:__ Unlike most of my other programs, ''#define ORIGINAL'' is not active in the source code listing due to interactive tests.

#include <iostream>
#include <string>

// customize code for original problem
//#define ORIGINAL

// convert a number into its written represenatation
std::string convert(unsigned long long x)
{
#ifdef ORIGINAL
	const std::string Gap = " And ";   // British
	const std::string ConnectTensAndOnes = "-";
#else
	const std::string Gap = " ";
	const std::string ConnectTensAndOnes = " ";
#endif

	// non-composite names
	switch (x)
	{
	case 0: return "Zero";
	case 1: return "One";
	case 2: return "Two";
	case 3: return "Three";
	case 4: return "Four";
	case 5: return "Five";
	case 6: return "Six";
	case 7: return "Seven";
	case 8: return "Eight";
	case 9: return "Nine";
	case 10: return "Ten";
	case 11: return "Eleven";
	case 12: return "Twelve";
	case 13: return "Thirteen";
	case 14: return "Fourteen";
	case 15: return "Fifteen";
	case 16: return "Sixteen";
	case 17: return "Seventeen";
	case 18: return "Eighteen";
	case 19: return "Nineteen";
	default: break;
	}

	// two-digit composite names
	if (x >= 20 && x < 100)
	{
		auto ones = x % 10;
		auto tens = x / 10;
		auto strOnes = (ones != 0) ? ConnectTensAndOnes + convert(ones) : "";

		switch (tens)
		{
		case 2: return "Twenty" + strOnes;
		case 3: return "Thirty" + strOnes;
		case 4: return "Forty" + strOnes;     // <= often misspelt/pispelled ;)
		case 5: return "Fifty" + strOnes;
		case 6: return "Sixty" + strOnes;
		case 7: return "Seventy" + strOnes;
		case 8: return "Eighty" + strOnes;
		case 9: return "Ninety" + strOnes;
		default: break;    // never riched
		}
	}

	// three-digit composite names
	if (x >= 100 && x < 1000)
	{
		auto onesAndTens = x % 100;
		auto hundreds = x / 100;
		auto strOnesAndTens = (onesAndTens != 0) ? Gap + convert(onesAndTens) : "";
		return convert(hundreds) + " Hundred" + strOnesAndTens;
	}

	// four to six digits
	if (x >= 1000 && x < 1000000)
	{
		auto low = x % 1000;           // variable names got too long, I went for a generic one ...
		auto high = x / 1000;
		auto strLow = (low != 0) ? Gap + convert(low) : "";
		return convert(high) + " Thousand" + strLow;
	}

	// seven to nine digits
	if (x >= 1000000 && x < 1000000000)
	{
		auto low = x % 1000000;
		auto high = x / 1000000;
		auto strLow = (low != 0) ? Gap + convert(low) : "";
		return convert(high) + " Million" + strLow;
	}

	// ten to twelve digits
	if (x >= 1000000000 && x < 1000000000000ULL)   // careful: must be a 64 bit constant, add "LL" - long long, "U" - unsigned
	{
		auto low = x % 1000000000;
		auto high = x / 1000000000;
		auto strLow = (low != 0) ? Gap + convert(low) : "";
		return convert(high) + " Billion" + strLow;
	}

	// thirteen to fifteen digits
	if (x >= 1000000000000ULL && x < 1000000000000000ULL)
	{
		auto low = 1000000000000000ULL % 1000000000000ULL;
		auto high = 1000000000000000ULL / 1000000000000ULL;
		auto strLow = (low != 0) ? Gap + convert(low) : "";
		return convert(high) + " Trillion" + strLow;
	}

	// not reached
	return "?";
}

int main()
{
#ifdef ORIGINAL
    // count number of letters
	unsigned int sum = 0;
	unsigned int max = 1000;
	for (unsigned int i = 1; i <= max; i++)
	{
		auto name = convert(i);
		for (auto c : name) { if (std::isalpha(c)) { sum++; } } // discard spaces/hypens/etc.
	}
	std::cout << sum << std::endl;
#else
	// just print several names according to input
	unsigned int tests;
	std::cin >> tests;
	while (tests--)
	{
		unsigned long long x;
		std::cin >> x;
		std::cout << convert(x) << std::endl;
	}
#endif // ORIGINAL
	return 0;
}



