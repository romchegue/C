###### ПРЕДЫДУЩИЕ УРОКИ - в файле YouTube_SimpleCode_C++_part1.txt

###### Урок #129 - Структуры в C++ | struct C++. Разница между структурой и классом. Изучение С++ для начинающих.
#include <iostream>
#include <string>
using namespace std;

/*
class MyClass
{
public:                     
    int a = 10;

    void Print() { cout << a << endl; }
};


struct MyStruct     // по умолчанию все поля и методы - public. При наследовании наследуются они как public
{
    MyStruct()
    {
        a = 0;
    }
    MyStruct(int a)
    {
        this->a = a;
    }
    ~MyStruct()
    {
    }

private:
    int a;
    void Print() { cout << a << endl; }
};
*/

class MyClass1
{
public:
    int a = 10;
};

class MyClass2 : public MyClass1      // по умолчанию - private
{
};

struct MyStruct1
{
    int a = 22;
};

struct MyStruct2 : MyStruct1
{
};

int main()
{
    setlocale(LC_ALL, "ru");
    MyClass1 m;
    MyStruct1 ms;
    MyClass2 m2;
    MyStruct2 ms2;
    
    cout << m2.a << endl;
    cout << ms2.a << endl;
    //ms.Print();
    
    return 0;
}


###### Урок #130 - Умные указатели. Smart pointers. Изучение С++ для начинающих.
#include <iostream>
#include <string>
using namespace std;

template<typename T>
class SmartPointer
{
public:

    SmartPointer(T *ptr)
    {
        this->ptr = ptr;
        cout << "Constructor" << endl;
    }
    
    ~SmartPointer()
    {
        delete ptr;
        cout << "Destructor" << endl;
    }

    T& operator * ()    // T& - сслыка на те данные, которые хотим передавать
    {
        return *ptr;
    }

private:
    T *ptr;      // тут в объекте класса будет храниться указатель
};


int main()
{
    setlocale(LC_ALL, "ru");
    /*
    int* ptr = new int(5);     // выделяем место в динамической памяти
    delete ptr;
    */
    SmartPointer<int> pointer = new int(5);   // new - возвращает указатель
    *pointer = 1638276;

    cout << *pointer << endl;

    return 0;
}


###### Урок #131 - auto_ptr | unique_ptr | shared_ptr | Умные указатели. Изучение С++ для начинающих.
#include <iostream>
#include <string>
#include <memory>             // !!!
using namespace std;



template<typename T>
class SmartPointer
{
public:

    SmartPointer(T *ptr)
    {
        this->ptr = ptr;
        cout << "Constructor" << endl;
    }
    
    ~SmartPointer()
    {
        delete ptr;
        cout << "Destructor" << endl;
    }

    T& operator * ()  
    {
        return *ptr;
    }

private:
    T *ptr;    
};


int main()
{
    setlocale(LC_ALL, "ru");
    
    shared_ptr<int> p1(new int(5));        // BEST PRACTICE
    shared_ptr<int> p2(p1);
    
    
    /*
    int* p = new int(5);
    unique_ptr<int> p1(p);
    p1.reset();
    p1.release();

    unique_ptr<int> p1(new int(5));
    int* p = p1.get();            // выдаёт УКАЗАТЕЛЬ в его сыром чистом виде
    //unique_ptr<int> p2(p1);     // ERROR!!! не даст сосслаться на другой unique_ptr
    unique_ptr<int> p2;
    p2.swap(p1);                // АНАЛОГ: p2 = move(p1);
    */
    
    //auto_ptr<int> ap1(new int(5));
    //auto_ptr<int> ap2(ap1);

    //SmartPointer<int> sp1 = new int(5); 
    //SmartPointer<int> sp2 = sp1;      // повторный вызов деструктора вызывает ошибку!
    
    return 0;
}


###### Урок #132 - Динамический массив и умные указатели. Изучение С++ для начинающих.
#include <iostream>
#include <string>
#include <memory>             
using namespace std;


int main()
{
    setlocale(LC_ALL, "ru");
    
    int size;
    cout << "Введите размер массива: ";
    cin >> size;
    cout << endl;

    //int* arr = new int[size] { 1, 6, 44, 9, 8 };
    //shared_ptr<int[]> ptr(arr);
    shared_ptr<int[]> ptr(new int[size]);
    
    cout << "Массив заполен псевдослучайными числами:" << endl;
    for (int i = 0; i < size; i++)
    {
        ptr[i] = rand() % 10;
        cout << ptr[i] << endl;
    }

    return 0;
}


###### Односвязный список | Динамические структуры данных #1
#https://youtu.be/C9FK1pHLnhI


###### Двусвязный список | Динамические структуры данных #2
#https://youtu.be/lQ-lPjbb9Ew


###### Бинарное дерево. Полное понимание! Динамические структуры данных #3
#https://youtu.be/9o_i0zzxk1s


###### Стек как структура данных. Полное понимание! Динамические структуры данных #4


###### Очередь как структура данных. Динамические структуры данных #5


###### Очередь с приоритетом | Кольцевая очередь | Динамические структуры данных #6


###### Дек | Deque | Динамические структуры данных #7


###### Урок #133 - Реализация односвязного списка c++ Часть 1 | Урок #133
#include <iostream>
#include <string>
using namespace std;

template<typename T>
class List
{
public:
    List();
    ~List();

    void push_back(T data);
    int GetSize(){ return Size; }

    T& operator[](const int index);


private:
    template<typename T>
    class Node
    {
    public:
        Node* pNext;      // указатель на следующий элемент типа Node
        T data;

        Node(T data=T(), Node *pNext=nullptr)     // T() - констурктор по умолчанию (лишь бы не мусор). Последн. Node указ-ет на nullptr
        {
            this->data = data;
            this->pNext = pNext;
        }
    };

    int Size;         // кол-во элементов с списке      
    Node<T> *head;    // указатель на первый элемент. Все элементы односвязного списка хранятся в динамической памяти
};

template<typename T>
List<T>::List()
{
    Size = 0;           // список при создании пуст
    head = nullptr;     // первого элемента ещё нет
}

template<typename T>
List<T>::~List()
{
}

template<typename T>
void List<T>::push_back(T data)      // добавить данный в конец списка = добавление элемента в конец списка
{
    if (head == nullptr)
    {
        head = new Node<T>(data);
    }
    else
    {
        Node<T>* current = this->head;     // временная переменная - для поиска последнего элемента одн. списка

        while (current->pNext != nullptr)    
        {
            current = current->pNext;
        }
        current->pNext = new Node<T>(data);

    }

    Size++;
}

template<typename T>
T& List<T>::operator[](const int index)
{
    int counter = 0;
    Node<T>*current = this->head;

    while (current != nullptr)
    {
        if (counter == index)
        {
            return current->data;
        }
        current = current->pNext;
        counter++;
    }
}



int main()
{
    setlocale(LC_ALL, "ru");

    List<int> lst;
    /*
    lst.push_back(5);
    lst.push_back(10);
    lst.push_back(22);
    */
    int numbersCount;
    cout << "Введите размер односвязного списка: " << endl;
    cin >> numbersCount;

    for (int i = 0; i < numbersCount; i++)
    {
        lst.push_back(rand() % 10);
    }
    
    for (int i = 0; i < numbersCount; i++)
    {
        cout << lst[i] << " ";
    }
    cout << endl;

    return 0;
}


###### Урок #134 - Реализация односвязного списка c++ Часть 2 | Урок #134
#include <iostream>
#include <string>
using namespace std;

template<typename T>
class List
{
public:
    List();
    ~List();

    void pop_front();
    void push_back(T data);
    void clear();
    int GetSize(){ return Size; }
    T& operator[](const int index);

private:
    template<typename T>
    class Node
    {
    public:
        Node* pNext;      // указатель на следующий элемент типа Node
        T data;

        Node(T data=T(), Node *pNext=nullptr)     // T() - констурктор по умолчанию (лишь бы не мусор). Последн. Node указ-ет на nullptr
        {
            this->data = data;
            this->pNext = pNext;
        }
    };

    int Size;         // кол-во элементов с списке      
    Node<T> *head;    // указатель на первый элемент. Все элементы односвязного списка хранятся в динамической памяти
};

template<typename T>
List<T>::List()
{
    Size = 0;           // список при создании пуст
    head = nullptr;     // первого элемента ещё нет
}

template<typename T>
List<T>::~List()
{
    clear();
}

template<typename T>
void List<T>::clear()
{
    while (Size)
    {
        cout << "Вызван метод clear() для данных: " << this->head->data << endl;
        pop_front();
    }
}

template<typename T>
void List<T>::pop_front()
{
    Node<T>* temp = head;
    head = head->pNext;
    delete temp;
    Size--;
}

template<typename T>
void List<T>::push_back(T data)      // добавить данный в конец списка = добавление элемента в конец списка
{
    if (head == nullptr)
    {
        head = new Node<T>(data);
    }
    else
    {
        Node<T>* current = this->head;     // временная переменная - для поиска последнего элемента одн. списка

        while (current->pNext != nullptr)    
        {
            current = current->pNext;
        }
        current->pNext = new Node<T>(data);

    }

    Size++;
}

template<typename T>
T& List<T>::operator[](const int index)
{
    int counter = 0;
    Node<T>*current = this->head;

    while (current != nullptr)
    {
        if (counter == index)
        {
            return current->data;
        }
        current = current->pNext;
        counter++;
    }
}



int main()
{
    setlocale(LC_ALL, "ru");

    List<int> lst;
    /*
    lst.push_back(5);
    lst.push_back(10);
    lst.push_back(22);
    */
    int numbersCount;
    cout << "Введите размер односвязного списка: " << endl;
    cin >> numbersCount;

    for (int i = 0; i < numbersCount; i++)
    {
        lst.push_back(rand() % 10);
    }
    
    for (int i = 0; i < numbersCount; i++)
    {
        cout << lst[i] << " ";
    }
    cout << endl;

    //cout << "Выполняю метод clear()" << endl;
    lst.pop_front();
    //lst.clear();

    for (int i = 0; i < lst.GetSize(); i++)
    {
        cout << lst[i] << " ";
    }
    cout << endl;

    return 0;
}


###### Урок #135 - Реализация односвязного списка c++ Часть 3 | Урок #135
/*
МОЙ ВАРИАНТ РЕЛИЗАЦИИ МЕТОДОВ:
    void push_front(T data);
    void pop_back();
    void insert(T value, const int index);
    void removeAt(const int index);
*/
#include <iostream>
#include <string>
using namespace std;

template<typename T>
class List
{
public:
    List();
    ~List();

    void pop_front();
    void push_back(T data);
    void clear();
    void push_front(T data);
    void pop_back();
    void insert(T value, const int index);
    void removeAt(const int index);
    int GetSize(){ return Size; }
    T& operator[](const int index);

private:
    template<typename T>
    class Node
    {
    public:
        Node* pNext;      // указатель на следующий элемент типа Node
        T data;

        Node(T data=T(), Node *pNext=nullptr)     // T() - констурктор по умолчанию (лишь бы не мусор). Последн. Node указ-ет на nullptr
        {
            this->data = data;
            this->pNext = pNext;
        }
    };

    int Size;         // кол-во элементов с списке      
    Node<T> *head;    // указатель на первый элемент. Все элементы односвязного списка хранятся в динамической памяти
};

template<typename T>
List<T>::List()
{
    Size = 0;           // список при создании пуст
    head = nullptr;     // первого элемента ещё нет
}

template<typename T>
List<T>::~List()
{
    clear();
}

template<typename T>
void List<T>::clear()
{
    while (Size)
    {
        cout << "Вызван метод clear() для данных: " << this->head->data << endl;
        pop_front();
    }
}

template<typename T>
void List<T>::insert(T value, const int index)
{
    if (index == 0)    // если индекс = 0, то вставляем в начало - метод push_front()
    {
        push_front(value);
        return;
    }
    if (index == Size)    // если индекс = Size, то вставляем в конец - метод push_back()
    {
        push_back(value);    
        return;
    }
    // при вставке в середину делаем следующее:
    int counter = 0;
    Node<T>* current = head;
    Node<T>* previous = new Node<T>();
    while (current->pNext != nullptr)
    {
        previous = current;
        current = current->pNext;
        counter++;
        if (counter == index)
        {
            previous->pNext = new Node<T>(value, current);
        }
    }
    Size++;
}

template<typename T>
void List<T>::removeAt(const int index)
{
    if (index == 0) // если индекс = 0, то удаляем из начала - метод pop_front()
    {
        pop_front();
        return;
    }
    if (index == Size-1)   // если индекс = Size-1, то удаляем из конца - метод pop_back()
    {
        pop_back();
        return;
    }
    // при удалении из середины делаем следующее:
    int counter = 0;
    Node<T>* current = head;
    Node<T>* previous = new Node<T>();
    while (current->pNext != nullptr)
    {
        previous = current;
        current = current->pNext;
        counter++;
        if (counter == index)
        {
            previous->pNext = current->pNext;
            delete current;
            break;
        }
    }
    Size--;
}

template<typename T>
void List<T>::push_front(T data)
{
    Node<T> *temp = new Node<T>(data, head);
    head = temp;
    Size++;
}

template<typename T>
void List<T>::pop_back()
{
    Node<T>* current = head;
    Node<T>* previous = new Node<T>();
    while (current->pNext != nullptr)
    {
        previous = current;
        current = current->pNext;
    }
    previous->pNext = nullptr;
    delete current;
    Size--;
}

template<typename T>
void List<T>::pop_front()
{
    Node<T>* temp = head;
    head = head->pNext;
    delete temp;
    Size--;
}

template<typename T>
void List<T>::push_back(T data)      // добавить данный в конец списка = добавление элемента в конец списка
{
    if (head == nullptr)
    {
        head = new Node<T>(data);
    }
    else
    {
        Node<T>* current = this->head;     // временная переменная - для поиска последнего элемента одн. списка

        while (current->pNext != nullptr)    
        {
            current = current->pNext;
        }
        current->pNext = new Node<T>(data);
    }
    Size++;
}

template<typename T>
T& List<T>::operator[](const int index)
{
    int counter = 0;
    Node<T>*current = this->head;

    while (current != nullptr)
    {
        if (counter == index)
        {
            return current->data;
        }
        current = current->pNext;
        counter++;
    }
}



int main()
{
    setlocale(LC_ALL, "ru");

    List<int> lst;
    /*
    lst.push_back(5);
    lst.push_back(10);
    lst.push_back(22);
    */
    int numbersCount;
    cout << "Введите размер односвязного списка: " << endl;
    cin >> numbersCount;

    for (int i = 0; i < numbersCount; i++)
    {
        lst.push_back(rand() % 10);
    }
    
    for (int i = 0; i < numbersCount; i++)
    {
        cout << lst[i] << " ";
    }
    cout << endl;

    //cout << "Выполняю метод clear()" << endl;
    //lst.pop_front();
    //lst.clear();
    //lst.push_front(888);
    //lst.pop_back();
    lst.insert(888, 1);
    
    lst.removeAt(1);
    for (int i = 0; i < lst.GetSize(); i++)
    {
        cout << lst[i] << " ";
    }
    cout << endl;

    return 0;
}


//################################################################
/*
ВАРИАНТ СЕРГЕЯ РЕЛИЗАЦИИ МЕТОДОВ:
    void push_front(T data);
    void pop_back();
    void insert(T value, const int index);
    void removeAt(const int index);
*/
#include <iostream>
#include <string>
using namespace std;

template<typename T>
class List
{
public:
    List();
    ~List();

    void pop_front();
    void push_back(T data);
    void clear();
    void push_front(T data);
    void pop_back();
    void insert(T value, const int index);
    void removeAt(const int index);
    int GetSize(){ return Size; }
    T& operator[](const int index);

private:
    template<typename T>
    class Node
    {
    public:
        Node* pNext;      // указатель на следующий элемент типа Node
        T data;

        Node(T data=T(), Node *pNext=nullptr)     // T() - констурктор по умолчанию (лишь бы не мусор). Последн. Node указ-ет на nullptr
        {
            this->data = data;
            this->pNext = pNext;
        }
    };

    int Size;         // кол-во элементов с списке      
    Node<T> *head;    // указатель на первый элемент. Все элементы односвязного списка хранятся в динамической памяти
};

template<typename T>
List<T>::List()
{
    Size = 0;           // список при создании пуст
    head = nullptr;     // первого элемента ещё нет
}

template<typename T>
List<T>::~List()
{
    clear();
}

template<typename T>
void List<T>::clear()
{
    while (Size)
    {
        pop_front();
    }
}

template<typename T>
void List<T>::insert(T value, const int index)
{
    if (index == 0)    
    {
        push_front(value);
    }
    else
    {
        Node<T>* previous = this->head;
        for (int i = 0; i < index - 1; i++)
        {
            previous = previous->pNext;
        }
 
        previous->pNext = new Node<T>(value, previous->pNext);

        Size++;
    }
}

template<typename T>
void List<T>::removeAt(const int index)
{
    if (index == 0) 
    {
        pop_front();
    }
    else
    {
        Node<T>* previous = this->head;
        for (int i = 0; i < index - 1; i++)
        {
            previous = previous->pNext;
        }
        
        Node<T>* toDelete = previous->pNext;
        previous->pNext = toDelete->pNext;
        delete toDelete;
        Size--;
    }
}

template<typename T>
void List<T>::push_front(T data)
{
    head = new Node<T>(data, head);
    Size++;
}

template<typename T>
void List<T>::pop_back()
{
    removeAt(Size - 1);
}


template<typename T>
void List<T>::pop_front()
{
    Node<T>* temp = head;
    head = head->pNext;
    delete temp;
    Size--;
}

template<typename T>
void List<T>::push_back(T data)      // добавить данный в конец списка = добавление элемента в конец списка
{
    if (head == nullptr)
    {
        head = new Node<T>(data);
    }
    else
    {
        Node<T>* current = this->head;     // временная переменная - для поиска последнего элемента одн. списка

        while (current->pNext != nullptr)    
        {
            current = current->pNext;
        }
        current->pNext = new Node<T>(data);
    }
    Size++;
}

template<typename T>
T& List<T>::operator[](const int index)
{
    int counter = 0;
    Node<T>*current = this->head;

    while (current != nullptr)
    {
        if (counter == index)
        {
            return current->data;
        }
        current = current->pNext;
        counter++;
    }
}



int main()
{
    setlocale(LC_ALL, "ru");

    List<int> lst;
    /*
    lst.push_back(5);
    lst.push_back(10);
    lst.push_back(22);
    */
    int numbersCount;
    cout << "Введите размер односвязного списка: " << endl;
    cin >> numbersCount;

    for (int i = 0; i < numbersCount; i++)
    {
        lst.push_back(rand() % 10);
    }
    
    for (int i = 0; i < numbersCount; i++)
    {
        cout << lst[i] << " ";
    }
    cout << endl;

    //cout << "Выполняю метод clear()" << endl;
    //lst.pop_front();
    //lst.clear();
    //lst.push_front(888);
    lst.pop_back();
    //lst.insert(888, 5);
    //lst.removeAt(3);

    for (int i = 0; i < lst.GetSize(); i++)
    {
        cout << lst[i] << " ";
    }
    cout << endl;

    return 0;
}


###### vector | Библиотека стандартных шаблонов (stl) | Уроки | C++ | #1
