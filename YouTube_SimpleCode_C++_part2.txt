###### ПРЕДЫДУЩИЕ УРОКИ - в файле YouTube_SimpleCode_C++_part1.txt

###### Урок #129 - Структуры в C++ | struct C++. Разница между структурой и классом. Изучение С++ для начинающих.
#include <iostream>
#include <string>
using namespace std;

/*
class MyClass
{
public:                     
    int a = 10;

    void Print() { cout << a << endl; }
};


struct MyStruct     // по умолчанию все поля и методы - public. При наследовании наследуются они как public
{
    MyStruct()
    {
        a = 0;
    }
    MyStruct(int a)
    {
        this->a = a;
    }
    ~MyStruct()
    {
    }

private:
    int a;
    void Print() { cout << a << endl; }
};
*/

class MyClass1
{
public:
    int a = 10;
};

class MyClass2 : public MyClass1      // по умолчанию - private
{
};

struct MyStruct1
{
    int a = 22;
};

struct MyStruct2 : MyStruct1
{
};

int main()
{
    setlocale(LC_ALL, "ru");
    MyClass1 m;
    MyStruct1 ms;
    MyClass2 m2;
    MyStruct2 ms2;
    
    cout << m2.a << endl;
    cout << ms2.a << endl;
    //ms.Print();
    
    return 0;
}


###### Урок #130 - Умные указатели. Smart pointers. Изучение С++ для начинающих.
#include <iostream>
#include <string>
using namespace std;

template<typename T>
class SmartPointer
{
public:

    SmartPointer(T *ptr)
    {
        this->ptr = ptr;
        cout << "Constructor" << endl;
    }
    
    ~SmartPointer()
    {
        delete ptr;
        cout << "Destructor" << endl;
    }

    T& operator * ()    // T& - сслыка на те данные, которые хотим передавать
    {
        return *ptr;
    }

private:
    T *ptr;      // тут в объекте класса будет храниться указатель
};


int main()
{
    setlocale(LC_ALL, "ru");
    /*
    int* ptr = new int(5);     // выделяем место в динамической памяти
    delete ptr;
    */
    SmartPointer<int> pointer = new int(5);   // new - возвращает указатель
    *pointer = 1638276;

    cout << *pointer << endl;

    return 0;
}


###### Урок #131 - auto_ptr | unique_ptr | shared_ptr | Умные указатели. Изучение С++ для начинающих.
#include <iostream>
#include <string>
#include <memory>             // !!!
using namespace std;



template<typename T>
class SmartPointer
{
public:

    SmartPointer(T *ptr)
    {
        this->ptr = ptr;
        cout << "Constructor" << endl;
    }
    
    ~SmartPointer()
    {
        delete ptr;
        cout << "Destructor" << endl;
    }

    T& operator * ()  
    {
        return *ptr;
    }

private:
    T *ptr;    
};


int main()
{
    setlocale(LC_ALL, "ru");
    
    shared_ptr<int> p1(new int(5));        // BEST PRACTICE
    shared_ptr<int> p2(p1);
    
    
    /*
    int* p = new int(5);
    unique_ptr<int> p1(p);
    p1.reset();
    p1.release();

    unique_ptr<int> p1(new int(5));
    int* p = p1.get();            // выдаёт УКАЗАТЕЛЬ в его сыром чистом виде
    //unique_ptr<int> p2(p1);     // ERROR!!! не даст сосслаться на другой unique_ptr
    unique_ptr<int> p2;
    p2.swap(p1);                // АНАЛОГ: p2 = move(p1);
    */
    
    //auto_ptr<int> ap1(new int(5));
    //auto_ptr<int> ap2(ap1);

    //SmartPointer<int> sp1 = new int(5); 
    //SmartPointer<int> sp2 = sp1;      // повторный вызов деструктора вызывает ошибку!
    
    return 0;
}


###### Урок #132 - Динамический массив и умные указатели. Изучение С++ для начинающих.
#include <iostream>
#include <string>
#include <memory>             
using namespace std;


int main()
{
    setlocale(LC_ALL, "ru");
    
    int size;
    cout << "Введите размер массива: ";
    cin >> size;
    cout << endl;

    //int* arr = new int[size] { 1, 6, 44, 9, 8 };
    //shared_ptr<int[]> ptr(arr);
    shared_ptr<int[]> ptr(new int[size]);
    
    cout << "Массив заполен псевдослучайными числами:" << endl;
    for (int i = 0; i < size; i++)
    {
        ptr[i] = rand() % 10;
        cout << ptr[i] << endl;
    }

    return 0;
}


###### Односвязный список | Динамические структуры данных #1
#https://youtu.be/C9FK1pHLnhI


###### Двусвязный список | Динамические структуры данных #2
#https://youtu.be/lQ-lPjbb9Ew


###### Бинарное дерево. Полное понимание! Динамические структуры данных #3
#https://youtu.be/9o_i0zzxk1s


###### Стек как структура данных. Полное понимание! Динамические структуры данных #4


###### Очередь как структура данных. Динамические структуры данных #5


###### Очередь с приоритетом | Кольцевая очередь | Динамические структуры данных #6


###### Дек | Deque | Динамические структуры данных #7


###### Урок #133 - Реализация односвязного списка c++ Часть 1 | Урок #133
#include <iostream>
#include <string>
using namespace std;

template<typename T>
class List
{
public:
    List();
    ~List();

    void push_back(T data);
    int GetSize(){ return Size; }

    T& operator[](const int index);


private:
    template<typename T>
    class Node
    {
    public:
        Node* pNext;      // указатель на следующий элемент типа Node
        T data;

        Node(T data=T(), Node *pNext=nullptr)     // T() - констурктор по умолчанию (лишь бы не мусор). Последн. Node указ-ет на nullptr
        {
            this->data = data;
            this->pNext = pNext;
        }
    };

    int Size;         // кол-во элементов с списке      
    Node<T> *head;    // указатель на первый элемент. Все элементы односвязного списка хранятся в динамической памяти
};

template<typename T>
List<T>::List()
{
    Size = 0;           // список при создании пуст
    head = nullptr;     // первого элемента ещё нет
}

template<typename T>
List<T>::~List()
{
}

template<typename T>
void List<T>::push_back(T data)      // добавить данный в конец списка = добавление элемента в конец списка
{
    if (head == nullptr)
    {
        head = new Node<T>(data);
    }
    else
    {
        Node<T>* current = this->head;     // временная переменная - для поиска последнего элемента одн. списка

        while (current->pNext != nullptr)    
        {
            current = current->pNext;
        }
        current->pNext = new Node<T>(data);

    }

    Size++;
}

template<typename T>
T& List<T>::operator[](const int index)
{
    int counter = 0;
    Node<T>*current = this->head;

    while (current != nullptr)
    {
        if (counter == index)
        {
            return current->data;
        }
        current = current->pNext;
        counter++;
    }
}



int main()
{
    setlocale(LC_ALL, "ru");

    List<int> lst;
    /*
    lst.push_back(5);
    lst.push_back(10);
    lst.push_back(22);
    */
    int numbersCount;
    cout << "Введите размер односвязного списка: " << endl;
    cin >> numbersCount;

    for (int i = 0; i < numbersCount; i++)
    {
        lst.push_back(rand() % 10);
    }
    
    for (int i = 0; i < numbersCount; i++)
    {
        cout << lst[i] << " ";
    }
    cout << endl;

    return 0;
}


###### Урок #134 - Реализация односвязного списка c++ Часть 2 | Урок #134
#include <iostream>
#include <string>
using namespace std;

template<typename T>
class List
{
public:
    List();
    ~List();

    void pop_front();
    void push_back(T data);
    void clear();
    int GetSize(){ return Size; }
    T& operator[](const int index);

private:
    template<typename T>
    class Node
    {
    public:
        Node* pNext;      // указатель на следующий элемент типа Node
        T data;

        Node(T data=T(), Node *pNext=nullptr)     // T() - констурктор по умолчанию (лишь бы не мусор). Последн. Node указ-ет на nullptr
        {
            this->data = data;
            this->pNext = pNext;
        }
    };

    int Size;         // кол-во элементов с списке      
    Node<T> *head;    // указатель на первый элемент. Все элементы односвязного списка хранятся в динамической памяти
};

template<typename T>
List<T>::List()
{
    Size = 0;           // список при создании пуст
    head = nullptr;     // первого элемента ещё нет
}

template<typename T>
List<T>::~List()
{
    clear();
}

template<typename T>
void List<T>::clear()
{
    while (Size)
    {
        cout << "Вызван метод clear() для данных: " << this->head->data << endl;
        pop_front();
    }
}

template<typename T>
void List<T>::pop_front()
{
    Node<T>* temp = head;
    head = head->pNext;
    delete temp;
    Size--;
}

template<typename T>
void List<T>::push_back(T data)      // добавить данный в конец списка = добавление элемента в конец списка
{
    if (head == nullptr)
    {
        head = new Node<T>(data);
    }
    else
    {
        Node<T>* current = this->head;     // временная переменная - для поиска последнего элемента одн. списка

        while (current->pNext != nullptr)    
        {
            current = current->pNext;
        }
        current->pNext = new Node<T>(data);

    }

    Size++;
}

template<typename T>
T& List<T>::operator[](const int index)
{
    int counter = 0;
    Node<T>*current = this->head;

    while (current != nullptr)
    {
        if (counter == index)
        {
            return current->data;
        }
        current = current->pNext;
        counter++;
    }
}



int main()
{
    setlocale(LC_ALL, "ru");

    List<int> lst;
    /*
    lst.push_back(5);
    lst.push_back(10);
    lst.push_back(22);
    */
    int numbersCount;
    cout << "Введите размер односвязного списка: " << endl;
    cin >> numbersCount;

    for (int i = 0; i < numbersCount; i++)
    {
        lst.push_back(rand() % 10);
    }
    
    for (int i = 0; i < numbersCount; i++)
    {
        cout << lst[i] << " ";
    }
    cout << endl;

    //cout << "Выполняю метод clear()" << endl;
    lst.pop_front();
    //lst.clear();

    for (int i = 0; i < lst.GetSize(); i++)
    {
        cout << lst[i] << " ";
    }
    cout << endl;

    return 0;
}


###### Урок #135 - Реализация односвязного списка c++ Часть 3 | Урок #135
/*
МОЙ ВАРИАНТ РЕЛИЗАЦИИ МЕТОДОВ:
    void push_front(T data);
    void pop_back();
    void insert(T value, const int index);
    void removeAt(const int index);
*/
#include <iostream>
#include <string>
using namespace std;

template<typename T>
class List
{
public:
    List();
    ~List();

    void pop_front();
    void push_back(T data);
    void clear();
    void push_front(T data);
    void pop_back();
    void insert(T value, const int index);
    void removeAt(const int index);
    int GetSize(){ return Size; }
    T& operator[](const int index);

private:
    template<typename T>
    class Node
    {
    public:
        Node* pNext;      // указатель на следующий элемент типа Node
        T data;

        Node(T data=T(), Node *pNext=nullptr)     // T() - констурктор по умолчанию (лишь бы не мусор). Последн. Node указ-ет на nullptr
        {
            this->data = data;
            this->pNext = pNext;
        }
    };

    int Size;         // кол-во элементов с списке      
    Node<T> *head;    // указатель на первый элемент. Все элементы односвязного списка хранятся в динамической памяти
};

template<typename T>
List<T>::List()
{
    Size = 0;           // список при создании пуст
    head = nullptr;     // первого элемента ещё нет
}

template<typename T>
List<T>::~List()
{
    clear();
}

template<typename T>
void List<T>::clear()
{
    while (Size)
    {
        cout << "Вызван метод clear() для данных: " << this->head->data << endl;
        pop_front();
    }
}

template<typename T>
void List<T>::insert(T value, const int index)
{
    if (index == 0)    // если индекс = 0, то вставляем в начало - метод push_front()
    {
        push_front(value);
        return;
    }
    if (index == Size)    // если индекс = Size, то вставляем в конец - метод push_back()
    {
        push_back(value);    
        return;
    }
    // при вставке в середину делаем следующее:
    int counter = 0;
    Node<T>* current = head;
    Node<T>* previous = new Node<T>();
    while (current->pNext != nullptr)
    {
        previous = current;
        current = current->pNext;
        counter++;
        if (counter == index)
        {
            previous->pNext = new Node<T>(value, current);
        }
    }
    Size++;
}

template<typename T>
void List<T>::removeAt(const int index)
{
    if (index == 0) // если индекс = 0, то удаляем из начала - метод pop_front()
    {
        pop_front();
        return;
    }
    if (index == Size-1)   // если индекс = Size-1, то удаляем из конца - метод pop_back()
    {
        pop_back();
        return;
    }
    // при удалении из середины делаем следующее:
    int counter = 0;
    Node<T>* current = head;
    Node<T>* previous = new Node<T>();
    while (current->pNext != nullptr)
    {
        previous = current;
        current = current->pNext;
        counter++;
        if (counter == index)
        {
            previous->pNext = current->pNext;
            delete current;
            break;
        }
    }
    Size--;
}

template<typename T>
void List<T>::push_front(T data)
{
    Node<T> *temp = new Node<T>(data, head);
    head = temp;
    Size++;
}

template<typename T>
void List<T>::pop_back()
{
    Node<T>* current = head;
    Node<T>* previous = new Node<T>();
    while (current->pNext != nullptr)
    {
        previous = current;
        current = current->pNext;
    }
    previous->pNext = nullptr;
    delete current;
    Size--;
}

template<typename T>
void List<T>::pop_front()
{
    Node<T>* temp = head;
    head = head->pNext;
    delete temp;
    Size--;
}

template<typename T>
void List<T>::push_back(T data)      // добавить данный в конец списка = добавление элемента в конец списка
{
    if (head == nullptr)
    {
        head = new Node<T>(data);
    }
    else
    {
        Node<T>* current = this->head;     // временная переменная - для поиска последнего элемента одн. списка

        while (current->pNext != nullptr)    
        {
            current = current->pNext;
        }
        current->pNext = new Node<T>(data);
    }
    Size++;
}

template<typename T>
T& List<T>::operator[](const int index)
{
    int counter = 0;
    Node<T>*current = this->head;

    while (current != nullptr)
    {
        if (counter == index)
        {
            return current->data;
        }
        current = current->pNext;
        counter++;
    }
}



int main()
{
    setlocale(LC_ALL, "ru");

    List<int> lst;
    /*
    lst.push_back(5);
    lst.push_back(10);
    lst.push_back(22);
    */
    int numbersCount;
    cout << "Введите размер односвязного списка: " << endl;
    cin >> numbersCount;

    for (int i = 0; i < numbersCount; i++)
    {
        lst.push_back(rand() % 10);
    }
    
    for (int i = 0; i < numbersCount; i++)
    {
        cout << lst[i] << " ";
    }
    cout << endl;

    //cout << "Выполняю метод clear()" << endl;
    //lst.pop_front();
    //lst.clear();
    //lst.push_front(888);
    //lst.pop_back();
    lst.insert(888, 1);
    
    lst.removeAt(1);
    for (int i = 0; i < lst.GetSize(); i++)
    {
        cout << lst[i] << " ";
    }
    cout << endl;

    return 0;
}


//################################################################
/*
ВАРИАНТ СЕРГЕЯ РЕЛИЗАЦИИ МЕТОДОВ:
    void push_front(T data);
    void pop_back();
    void insert(T value, const int index);
    void removeAt(const int index);
*/
#include <iostream>
#include <string>
using namespace std;

template<typename T>
class List
{
public:
    List();
    ~List();

    void pop_front();
    void push_back(T data);
    void clear();
    void push_front(T data);
    void pop_back();
    void insert(T value, const int index);
    void removeAt(const int index);
    int GetSize(){ return Size; }
    T& operator[](const int index);

private:
    template<typename T>
    class Node
    {
    public:
        Node* pNext;      // указатель на следующий элемент типа Node
        T data;

        Node(T data=T(), Node *pNext=nullptr)     // T() - констурктор по умолчанию (лишь бы не мусор). Последн. Node указ-ет на nullptr
        {
            this->data = data;
            this->pNext = pNext;
        }
    };

    int Size;         // кол-во элементов с списке      
    Node<T> *head;    // указатель на первый элемент. Все элементы односвязного списка хранятся в динамической памяти
};

template<typename T>
List<T>::List()
{
    Size = 0;           // список при создании пуст
    head = nullptr;     // первого элемента ещё нет
}

template<typename T>
List<T>::~List()
{
    clear();
}

template<typename T>
void List<T>::clear()
{
    while (Size)
    {
        pop_front();
    }
}

template<typename T>
void List<T>::insert(T value, const int index)
{
    if (index == 0)    
    {
        push_front(value);
    }
    else
    {
        Node<T>* previous = this->head;
        for (int i = 0; i < index - 1; i++)
        {
            previous = previous->pNext;
        }
 
        previous->pNext = new Node<T>(value, previous->pNext);

        Size++;
    }
}

template<typename T>
void List<T>::removeAt(const int index)
{
    if (index == 0) 
    {
        pop_front();
    }
    else
    {
        Node<T>* previous = this->head;
        for (int i = 0; i < index - 1; i++)
        {
            previous = previous->pNext;
        }
        
        Node<T>* toDelete = previous->pNext;
        previous->pNext = toDelete->pNext;
        delete toDelete;
        Size--;
    }
}

template<typename T>
void List<T>::push_front(T data)
{
    head = new Node<T>(data, head);
    Size++;
}

template<typename T>
void List<T>::pop_back()
{
    removeAt(Size - 1);
}


template<typename T>
void List<T>::pop_front()
{
    Node<T>* temp = head;
    head = head->pNext;
    delete temp;
    Size--;
}

template<typename T>
void List<T>::push_back(T data)      // добавить данный в конец списка = добавление элемента в конец списка
{
    if (head == nullptr)
    {
        head = new Node<T>(data);
    }
    else
    {
        Node<T>* current = this->head;     // временная переменная - для поиска последнего элемента одн. списка

        while (current->pNext != nullptr)    
        {
            current = current->pNext;
        }
        current->pNext = new Node<T>(data);
    }
    Size++;
}

template<typename T>
T& List<T>::operator[](const int index)
{
    int counter = 0;
    Node<T>*current = this->head;

    while (current != nullptr)
    {
        if (counter == index)
        {
            return current->data;
        }
        current = current->pNext;
        counter++;
    }
}



int main()
{
    setlocale(LC_ALL, "ru");

    List<int> lst;
    /*
    lst.push_back(5);
    lst.push_back(10);
    lst.push_back(22);
    */
    int numbersCount;
    cout << "Введите размер односвязного списка: " << endl;
    cin >> numbersCount;

    for (int i = 0; i < numbersCount; i++)
    {
        lst.push_back(rand() % 10);
    }
    
    for (int i = 0; i < numbersCount; i++)
    {
        cout << lst[i] << " ";
    }
    cout << endl;

    //cout << "Выполняю метод clear()" << endl;
    //lst.pop_front();
    //lst.clear();
    //lst.push_front(888);
    lst.pop_back();
    //lst.insert(888, 5);
    //lst.removeAt(3);

    for (int i = 0; i < lst.GetSize(); i++)
    {
        cout << lst[i] << " ";
    }
    cout << endl;

    return 0;
}


###### vector | Библиотека стандартных шаблонов (stl) | Уроки | C++ | #1
#include <iostream>
#include <vector>
using namespace std;


int main()
{
    setlocale(LC_ALL, "ru");

    vector<int> myVector;

    cout << "Количество элементов в векторе: " << myVector.size() << endl;
    cout << "capacity вектора: " << myVector.capacity() << endl;  


    /*
    // vector<int> myVector;    // вектор - прокачанный динамический массив. Это ОБОЛОЧКА ДЛЯ ДИНАМИЧЕСКОГО МАССИВА
    // vector<int> myVector1 = { 0,484,484,999 };        // так можно инициализировать ветор аналогично массиву
    // vector<int> myVector(0);  // создать ветор на 20 элементов и инициализировать его 0-ми
    // vector<int> myVector(20,55);  // создать ветор на 20 элементов и инициализировать его 55-ми

    myVector[0] = 1000;
    
    myVector.push_back(2);
    myVector.push_back(44);
    myVector.push_back(77);
    myVector.push_back(9);

    cout << myVector.empty() << endl;   // првоерка - есть ли элементы в нашем векторе? true - когда НЕТ (vector<int> myVector(0))

    myVector.reserve(100);    // резервируем место - выставляем capacity на 100 элементов - динамический массив на 100 элементов

    myVector.capacity();  // capacity() - сколько элементов он может вместить. При доб. элем-та память выделяется с запасом
    
    myVector.shrink_to_fit();  // уменьшает capacity до размера кол-ва элементов - экономим динам. память
    cout << "shrink_to_fit()" << endl;
    cout << "Количество элементов в векторе: " << myVector.size() << endl;
    cout << "capacity вектора: " << myVector.capacity() << endl;

    myVector.pop_back();
    //myVector.clear();

    //myVector.resize(20);
    //myVector.resize(20,888);

    try
    {
        cout << myVector.at(10) << endl;     // аналогично myVector[1], но с запретом на выход за границы. НО! Он медленнее
    }
    catch (const std::out_of_range& ex)
    {
        cout << ex.what() << endl << endl;
    }

    for (int i = 0; i < myVector.size(); i++)
    {
        cout << myVector[i] << endl;
    }
    */
    return 0;
}


###### Итераторы STL | Библиотека стандартных шаблонов (stl) | Уроки | C++ | #2
#include <iostream>
#include <vector>
using namespace std;


int main()
{
    setlocale(LC_ALL, "ru");

    vector<int> myVector = { 1,9,44,422,676,78 };
vector<int>::iterator it = myVector.begin();
    
    for (vector<int>::iterator i = myVector.begin(); i != myVector.end(); i++)
    {
        cout << *i << endl;
    }

    cout << endl << "insert " << endl << endl;


    advance(it, 3);      // Перемещаем итератор. Аналог: myVector.insert((it + 3), 999);
    myVector.insert(it, 999);

    for (vector<int>::iterator i = myVector.begin(); i != myVector.end(); i++)
    {
        cout << *i << endl;
    }

    cout << endl << "erase " << endl << endl;


    vector<int>::iterator itErase = myVector.begin();
    
    // advance(itErase, 3);
    // myVector.erase(itErase);
    myVector.erase(itErase, itErase+3);   // удалить с 0 элемента по 3-й

    for (vector<int>::iterator i = myVector.begin(); i != myVector.end(); i++)
    {
        cout << *i << endl;
    }
    /*
    advance(it, 3); // если итератор не поддерживает функционал: *(it + 3)
    cout << *it << endl;

    for (vector<int>::reverse_iterator i = myVector.rbegin(); i != myVector.rend(); i++)    //  reverse_iterator, rbegin(), rend() - справа налево
    {
        cout << *i << endl;
    }

    for (vector<int>::iterator i = myVector.begin(); i != myVector.end(); i++)
    {
        cout << *i << endl;
    }

    for (vector<int>::const_iterator i = myVector.cbegin(); i != myVector.cend(); i++)   // const_iterator, cbegin(), cend() - константные методы
    {
        cout << *i << endl;
    }
    // myVector.end() - указаывает на следующий элемент контейнера после последнего, то есть вникуда
    // vector<int>::iterator it;    // создаём итератор it вектора с данными int
    // it = myVector.begin();  // метод begin() возвращает итератор нужного нам типа
    // *it = 1000;
    // cout << *it << endl;     // разыменовываем итератор. Так же как с указателями и умными указателями   

    
    // int arr[] = { 2,6,9 };          // обычный статический массив
    // cout << arr[1] << endl;         // доступ к элементу массива через оператор []
    // cout << *(arr + 1) << endl;     // арифметика указателей
    */

    return 0;
}


###### Ключевое слово auto | Изучение С++ для начинающих. Урок #136
#include <iostream>
#include <vector>
//using namespace std;


int main()
{
    setlocale(LC_ALL, "ru");
    
    std::vector<int> myVector = { 11,46,9 };   // если не включено: using namespace std;

    std::vector<int>::iterator it = myVector.begin();
    auto it2 = myVector.begin();   // вместо std::vector<int>::iterator it2 = myVector.begin();

    for (auto it = myVector.begin(); it != myVector.end(); it++)
    {
        std::cout << *it << std::endl;
    }

    /*
    auto a = 10;   // С ПРОСТЫМИ ТИПАМИ ДАННЫХ ЛУЧШЕ НЕ ИСПОЛЬЗОВАТЬ auto - усложн. читабельность кода
    auto b = 1.44;
    auto c = "string";
    auto d = true;
    */

    return 0;
}


###### LIST | STL C++ | Библиотека стандартных шаблонов (stl) | Уроки | C++ | #3
#include <iostream>
#include <vector>
#include <list>
using namespace std;

template<typename T>
void PrintList(const list<T> &lst)
{
    for (auto i = lst.cbegin(); i != lst.cend(); ++i)    // префиксный инкремент !!!
    {
        cout << *i << endl;
    }
};


template<typename T>
void Advance(T &it, const int index)
{   // My realisation of function advance
    for (int i = 0; i < index; ++i)
    {
        ++it;
    }
};



int main()
{
    setlocale(LC_ALL, "ru");
    
    list<int> myList = { 15,64,979,54,99 };

    list<int> myList2 = { 22,45,554 };
    
    PrintList(myList);
    
    // myList.assign(myList2.begin(), myList2.end());   // Копирование из myList2 в myList
    // myList.assign(3, 111); // заполн. лист к.-то элем-ми (111). НО, прежде чем заполн. лист этими элем-ми, он ВСЕ предыд. элементы удаляет
    // myList.size();
    // myList.remove(979);    // удалить элемент номиналом 979
    // myList.erase(it);   // удалить элемент в позиции итератора it

    // auto Iter = myList.begin();
    // Advance(Iter, 3);   // моя релизация функции advance
    // cout << *Iter;

    // ++it;     // ИТЕРАТОР ЛИСТА НЕ ПОДДЕРЖИВАЕТ ДОСТУП К ПРОИЗВОЛЬНОМУ ИНДЕКСУ, например: it += 2
    // advance(it, 3);     // на какое количество сдвинуть итератор
    // myList.insert(it, 111);
    // myList.clear();
    // myList.reverse();
    // myList.unique();  // { 99,15,64,99,979,54,99,99,99 } ---> { 99,15,64,99,979,54,99 }
    // myList.push_back(5);
    // myList.push_front(151);
    // cout << myList.size();
    // PrintList(myList);
    // myList.pop_back();
    // myList.pop_front();
    // myList.sort();
    // auto it = myList.begin(); // list<int>::iterator it = myList.begin();

    return 0;
}


###### Итераторы stl c++ | prefix vs postfix | Библиотека стандартных шаблонов (stl) | Уроки | C++ | #4     
#include <iostream>
#include <vector>
#include <list>
using namespace std;

template<typename T>
void PrintList(const list<T> &lst)
{
    for (auto i = lst.cbegin(); i != lst.cend(); ++i)    // префиксный инкремент !!!
    {
        cout << *i << endl;
    }
};

int main()
{
    setlocale(LC_ALL, "ru");
    
    list<int>::iterator it;

    it++;    // F12 - показать перегруженную реализацию оператора

    ++it;

    return 0;
}


###### Цикл foreach C++ | range-based циклы | Изучение С++ для начинающих. Урок #137

#include <iostream>
#include <vector>      
#include <list>
using namespace std;

template<typename T>
void PrintList(const list<T>& lst)
{   // Ф-ия печати элементов списка. Реализация через range-base цикл
    for (const auto element : lst)                 
    {
        cout << element << endl;
    }

    /*
    for (auto i = lst.cbegin(); i != lst.cend(); ++i)
    {
        cout << *i << endl;
    }
    */
};

int main()
{
    setlocale(LC_ALL, "ru");
    
    list<int> myList = { 1,99,4,94,799,44,6 };

    for (const auto element : myList)
    {
        cout << element << endl;
    }

    cout << endl << endl;

    PrintList(myList);

    /*
    int arr[] = { 5,11,94,99,44 };
    for (auto &element : arr)     // RANGE-BASE ЦИКЛ. Удобно использовать ключевое слово auto
    {
        cout << element << endl;
        element += 1;
    }

    cout << endl << endl;
    for (const auto& element : arr)     // лучше передавать по ссылке, чтобы не копировать данные. const - не получится изменить элемент
    {
        cout << element << endl;
    }
    */

    return 0;
}


###### forward list stl c++ | Библиотека стандартных шаблонов (stl) | Уроки | C++ | #5
#include <iostream>
#include <forward_list>
using namespace std;

// FORWARD-LIST - реализация односвязного списка. Обычный LIST - двусвязного

int main()
{
    setlocale(LC_ALL, "ru");
    
    forward_list<int> fl = { 131,94,494 };

    forward_list<int>::iterator it = fl.begin();



    cout << *it << endl << endl;

    for (auto& element : fl)
    {
        cout << element << endl;
    }

    // auto it = fl.before_begin();      // итератор, кот. указывает на НИЧТО перед началом. Поэтому можно исп-ть insert_after() для элемента 0
    // auto it = fl.cbefore_begin();
    // fl.erase_after(it);
    // forward_list<int>::iterator it = fl.begin();
    // fl.insert_after(it, 9999);
    // ++it;
    // fl.push_front(1);

    /*
    for (auto &element : fl)
    {
        cout << element << endl;
    }
    */

    return 0;
}


###### array STL C++ | | Библиотека стандартных шаблонов (stl) | Уроки | C++ | #6
#include <iostream>
#include <array>
using namespace std;

// STL array - обёртка для СТАТИЧЕСКИХ массивов 

int main()
{
    setlocale(LC_ALL, "ru");
    
    array<int,4> arr = { 1,94,77,9};     // в скобках <> - тип элементов и размер массива 
    
    for (auto element : arr)
    {
        cout << element << endl;
    }

    /*
    for (int i = 0; i < arr.size(); i++)
    {
        cout << arr[i] << endl;
    }
    */

    /*
    try
    {
        cout << arr.at(11) << endl;
    }
    catch (const std::exception&ex)
    {
        cout << ex.what() << endl;
    }
    */

    // arr.front();   // доступ к 0-му элементу массива
    // arr.back();    // доступ к последнему элементу массива
    // arr.fill(-1);    // заполнит массив значенями -1
    // arr.size();   // не нужно хранить размер массива в отдельной переменной. Для этого есть метод size()
    // cout << arr[0] << endl;        // не контролируется на выход за границы массива
    // cout << arr.at(0) << endl;     // проверка на выход за границы массива
    return 0;
}


###### Контейнеры STL и операторы сравнения. | Библиотека стандартных шаблонов (stl) | Уроки | C++ | #7
#include <iostream>
#include <array>
using namespace std;

// При сравнении контейнеров элементы контейнера STL должны иметь возможность исп. операторы сравнения

int main()
{
    setlocale(LC_ALL, "ru");
    
    array<int, 4> arr = { 1,94,77,4 };  
    array<int, 4> arr2 = { 1,94,77,9 };

    // bool result = arr < arr2;
    bool result = arr != arr2;

    cout << result << endl;

    return 0;
}


###### deque stl c++ | Библиотека стандартных шаблонов (stl) | Уроки | C++ | #8
#include <iostream>
#include <vector>
#include <deque>
using namespace std;

// deque - гибрит ветора (~динамического массива) и листа (двусвязного списка)

int main()
{
    setlocale(LC_ALL, "ru");

    deque<int> dq = { 1,9,94 };

    deque<int>::iterator it = dq.begin();    // итератор произвольного доступа - вправо и влево можно двигаться
    ++it;                                
    --it;

    // dq.push_front(888);
    // dq.push_back(888);
    // dq[0];
    // dq.at(0);

    return 0;
}


###### SET | MULTISET | Ассоциативные контейнеры | Библиотека стандартных шаблонов (stl) | Уроки | C++ #9
#include <iostream>
#include <set>
using namespace std;

// Контейнеры set и multiset основаны на бинарном дереве. Упорядоченная структура данных. Хранит уникальные значения

int main()
{
    setlocale(LC_ALL, "ru");
    
    multiset<int> myMultiset = { 1,66,1,16,99,48 };   // может хранить несколько одинаковых значений

    myMultiset.insert(1);
    myMultiset.insert(1);
    myMultiset.insert(1);

    auto it1 = myMultiset.lower_bound(1);     // аналог метода find(), возвращает первый элемент со значением 1 в коллекции
    auto it2 = myMultiset.upper_bound(1);     // возвращает итератор на следующий элемент после последнего значения 1, т.е. 16
    auto a = myMultiset.equal_range(1);       // возвращает диапазон чисел от upper_bound(), до lower_bound(), т.е. (1, 16)


    cout << endl << endl;
    for (auto& item : myMultiset)
    {
        cout << item << endl;
    }


    /*
    for (auto &item : mySet)
    {
        cout << item << endl;
    }
    */

    // auto result = mySet.erase(11);   // возвращает 0 или 1 size_t - unsigned int (не может хранить отрицательные числа). 
    // auto result2 = mySet.insert(64); // возрващает пару значений - итератор на число (добавленное или уже имеющееся), и true, если элемент удалось ставить, false - если элемент уже был добавлен 
    // mySet.erase(11);        

    /*
    int value;
    cin >> value;

    if (mySet.find(value) != mySet.end())
    {
        cout << "Number " << value << " is found!" << endl;
    }
    else
    {
        cout << "Number " << value << " is not found!" << endl;
    }
    */

    // auto it = mySet.find(10);   // метод find() возвращает итератор на найденный момент в set'е, если найдёт. Если не найдёт - вернёт итератор на mySet.end()
    /*
    set<int> mySet = { 1,44,6,-2,43 };
    mySet.insert(5);            // первый элемент будет в корне дерева
    mySet.insert(1);            // меньше 5 - в левую часть дерева
    mySet.insert(12);           // больше 5 - в правую часть дерева
    mySet.insert(4);
    mySet.insert(4);
    mySet.insert(4);
    mySet.insert(4);
    mySet.insert(-1);
    */

    return 0;
}


###### typedef c++ что это | Изучение С++ для начинающих. Урок #138

